
exam_nucleof103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003254  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08003360  08003360  00013360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034bc  080034bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080034bc  080034bc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034bc  080034bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034bc  080034bc  000134bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034c0  080034c0  000134c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000070  08003534  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08003534  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084a7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a25  00000000  00000000  00028540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  00029f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e0  00000000  00000000  0002a700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c34  00000000  00000000  0002ade0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000975c  00000000  00000000  00042a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083926  00000000  00000000  0004c170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cfa96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002498  00000000  00000000  000cfae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003348 	.word	0x08003348

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003348 	.word	0x08003348

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b2d      	ldr	r3, [pc, #180]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2c      	ldr	r2, [pc, #176]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2a      	ldr	r3, [pc, #168]	; (8000218 <MX_GPIO_Init+0xcc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b27      	ldr	r3, [pc, #156]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a26      	ldr	r2, [pc, #152]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b24      	ldr	r3, [pc, #144]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b21      	ldr	r3, [pc, #132]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a20      	ldr	r2, [pc, #128]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1e      	ldr	r3, [pc, #120]	; (8000218 <MX_GPIO_Init+0xcc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b1b      	ldr	r3, [pc, #108]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b18      	ldr	r3, [pc, #96]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2120      	movs	r1, #32
 80001c4:	4815      	ldr	r0, [pc, #84]	; (800021c <MX_GPIO_Init+0xd0>)
 80001c6:	f000 fe37 	bl	8000e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001d0:	4b13      	ldr	r3, [pc, #76]	; (8000220 <MX_GPIO_Init+0xd4>)
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	4619      	mov	r1, r3
 80001de:	4811      	ldr	r0, [pc, #68]	; (8000224 <MX_GPIO_Init+0xd8>)
 80001e0:	f000 fca6 	bl	8000b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80001e4:	2320      	movs	r3, #32
 80001e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e8:	2301      	movs	r3, #1
 80001ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ec:	2300      	movs	r3, #0
 80001ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f0:	2302      	movs	r3, #2
 80001f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	4619      	mov	r1, r3
 80001fa:	4808      	ldr	r0, [pc, #32]	; (800021c <MX_GPIO_Init+0xd0>)
 80001fc:	f000 fc98 	bl	8000b30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000200:	2200      	movs	r2, #0
 8000202:	2100      	movs	r1, #0
 8000204:	2028      	movs	r0, #40	; 0x28
 8000206:	f000 fbaa 	bl	800095e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800020a:	2028      	movs	r0, #40	; 0x28
 800020c:	f000 fbc3 	bl	8000996 <HAL_NVIC_EnableIRQ>

}
 8000210:	bf00      	nop
 8000212:	3720      	adds	r7, #32
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40021000 	.word	0x40021000
 800021c:	40010800 	.word	0x40010800
 8000220:	10110000 	.word	0x10110000
 8000224:	40011000 	.word	0x40011000

08000228 <_write>:
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len){
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	b29a      	uxth	r2, r3
 8000238:	230a      	movs	r3, #10
 800023a:	68b9      	ldr	r1, [r7, #8]
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <_write+0x24>)
 800023e:	f001 fa95 	bl	800176c <HAL_UART_Transmit>
	return len;
 8000242:	687b      	ldr	r3, [r7, #4]
}
 8000244:	4618      	mov	r0, r3
 8000246:	3710      	adds	r7, #16
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	20000094 	.word	0x20000094

08000250 <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	if(huart->Instance == USART2){
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a17      	ldr	r2, [pc, #92]	; (80002bc <HAL_UART_RxCpltCallback+0x6c>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d127      	bne.n	80002b2 <HAL_UART_RxCpltCallback+0x62>
	printf("command:%c\n\r",rx_data);
 8000262:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <HAL_UART_RxCpltCallback+0x70>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	4619      	mov	r1, r3
 8000268:	4816      	ldr	r0, [pc, #88]	; (80002c4 <HAL_UART_RxCpltCallback+0x74>)
 800026a:	f002 f8d9 	bl	8002420 <iprintf>
	if(rx_data == '1'){
 800026e:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <HAL_UART_RxCpltCallback+0x70>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b31      	cmp	r3, #49	; 0x31
 8000274:	d108      	bne.n	8000288 <HAL_UART_RxCpltCallback+0x38>
		printf(">>LED ON<<\n\r");
 8000276:	4814      	ldr	r0, [pc, #80]	; (80002c8 <HAL_UART_RxCpltCallback+0x78>)
 8000278:	f002 f8d2 	bl	8002420 <iprintf>
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, 1);
 800027c:	2201      	movs	r2, #1
 800027e:	2120      	movs	r1, #32
 8000280:	4812      	ldr	r0, [pc, #72]	; (80002cc <HAL_UART_RxCpltCallback+0x7c>)
 8000282:	f000 fdd9 	bl	8000e38 <HAL_GPIO_WritePin>
 8000286:	e00b      	b.n	80002a0 <HAL_UART_RxCpltCallback+0x50>
	}
	else if(rx_data =='2'){
 8000288:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <HAL_UART_RxCpltCallback+0x70>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b32      	cmp	r3, #50	; 0x32
 800028e:	d107      	bne.n	80002a0 <HAL_UART_RxCpltCallback+0x50>

		printf(">>LED OFF<<\n\r");
 8000290:	480f      	ldr	r0, [pc, #60]	; (80002d0 <HAL_UART_RxCpltCallback+0x80>)
 8000292:	f002 f8c5 	bl	8002420 <iprintf>
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, 0);
 8000296:	2200      	movs	r2, #0
 8000298:	2120      	movs	r1, #32
 800029a:	480c      	ldr	r0, [pc, #48]	; (80002cc <HAL_UART_RxCpltCallback+0x7c>)
 800029c:	f000 fdcc 	bl	8000e38 <HAL_GPIO_WritePin>
	}
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80002a0:	2201      	movs	r2, #1
 80002a2:	4907      	ldr	r1, [pc, #28]	; (80002c0 <HAL_UART_RxCpltCallback+0x70>)
 80002a4:	480b      	ldr	r0, [pc, #44]	; (80002d4 <HAL_UART_RxCpltCallback+0x84>)
 80002a6:	f001 fae4 	bl	8001872 <HAL_UART_Receive_IT>
	printf_cmd();
 80002aa:	f000 f815 	bl	80002d8 <printf_cmd>
	printf_status();
 80002ae:	f000 f823 	bl	80002f8 <printf_status>


	}/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80002b2:	bf00      	nop
 80002b4:	3708      	adds	r7, #8
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40004400 	.word	0x40004400
 80002c0:	2000008c 	.word	0x2000008c
 80002c4:	08003360 	.word	0x08003360
 80002c8:	08003370 	.word	0x08003370
 80002cc:	40010800 	.word	0x40010800
 80002d0:	08003380 	.word	0x08003380
 80002d4:	20000094 	.word	0x20000094

080002d8 <printf_cmd>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void printf_cmd(){
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	printf("\r\n----------\r\n%s\r\n%s\r\n --------\n\r",
 80002dc:	4a03      	ldr	r2, [pc, #12]	; (80002ec <printf_cmd+0x14>)
 80002de:	4904      	ldr	r1, [pc, #16]	; (80002f0 <printf_cmd+0x18>)
 80002e0:	4804      	ldr	r0, [pc, #16]	; (80002f4 <printf_cmd+0x1c>)
 80002e2:	f002 f89d 	bl	8002420 <iprintf>
			"1:LED ON",
			"2:LED OFF");
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	08003390 	.word	0x08003390
 80002f0:	0800339c 	.word	0x0800339c
 80002f4:	080033a8 	.word	0x080033a8

080002f8 <printf_status>:
void printf_status(){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	printf("\r\n---STATUS---\r\n%s\r\n%s\r\n",
 80002fc:	4a03      	ldr	r2, [pc, #12]	; (800030c <printf_status+0x14>)
 80002fe:	4904      	ldr	r1, [pc, #16]	; (8000310 <printf_status+0x18>)
 8000300:	4804      	ldr	r0, [pc, #16]	; (8000314 <printf_status+0x1c>)
 8000302:	f002 f88d 	bl	8002420 <iprintf>
		"reg a:",
		"reg b:"
	);
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	080033cc 	.word	0x080033cc
 8000310:	080033d4 	.word	0x080033d4
 8000314:	080033dc 	.word	0x080033dc

08000318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031c:	f000 f9e6 	bl	80006ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000320:	f000 f812 	bl	8000348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000324:	f7ff ff12 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000328:	f000 f94a 	bl	80005c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800032c:	2201      	movs	r2, #1
 800032e:	4904      	ldr	r1, [pc, #16]	; (8000340 <main+0x28>)
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <main+0x2c>)
 8000332:	f001 fa9e 	bl	8001872 <HAL_UART_Receive_IT>
  printf_cmd();
 8000336:	f7ff ffcf 	bl	80002d8 <printf_cmd>
  printf_status();
 800033a:	f7ff ffdd 	bl	80002f8 <printf_status>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800033e:	e7fe      	b.n	800033e <main+0x26>
 8000340:	2000008c 	.word	0x2000008c
 8000344:	20000094 	.word	0x20000094

08000348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b090      	sub	sp, #64	; 0x40
 800034c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034e:	f107 0318 	add.w	r3, r7, #24
 8000352:	2228      	movs	r2, #40	; 0x28
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f002 f85a 	bl	8002410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800036a:	2302      	movs	r3, #2
 800036c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036e:	2301      	movs	r3, #1
 8000370:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000372:	2310      	movs	r3, #16
 8000374:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000376:	2302      	movs	r3, #2
 8000378:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800037a:	2300      	movs	r3, #0
 800037c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800037e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000382:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000384:	f107 0318 	add.w	r3, r7, #24
 8000388:	4618      	mov	r0, r3
 800038a:	f000 fd8f 	bl	8000eac <HAL_RCC_OscConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000394:	f000 f819 	bl	80003ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000398:	230f      	movs	r3, #15
 800039a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039c:	2302      	movs	r3, #2
 800039e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2102      	movs	r1, #2
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fffc 	bl	80013b0 <HAL_RCC_ClockConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003be:	f000 f804 	bl	80003ca <Error_Handler>
  }
}
 80003c2:	bf00      	nop
 80003c4:	3740      	adds	r7, #64	; 0x40
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ca:	b480      	push	{r7}
 80003cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ce:	b672      	cpsid	i
}
 80003d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d2:	e7fe      	b.n	80003d2 <Error_Handler+0x8>

080003d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003da:	4b15      	ldr	r3, [pc, #84]	; (8000430 <HAL_MspInit+0x5c>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	4a14      	ldr	r2, [pc, #80]	; (8000430 <HAL_MspInit+0x5c>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6193      	str	r3, [r2, #24]
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <HAL_MspInit+0x5c>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <HAL_MspInit+0x5c>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	4a0e      	ldr	r2, [pc, #56]	; (8000430 <HAL_MspInit+0x5c>)
 80003f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003fc:	61d3      	str	r3, [r2, #28]
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <HAL_MspInit+0x5c>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800040a:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <HAL_MspInit+0x60>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	4a04      	ldr	r2, [pc, #16]	; (8000434 <HAL_MspInit+0x60>)
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000426:	bf00      	nop
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000
 8000434:	40010000 	.word	0x40010000

08000438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800043c:	e7fe      	b.n	800043c <NMI_Handler+0x4>

0800043e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000442:	e7fe      	b.n	8000442 <HardFault_Handler+0x4>

08000444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000448:	e7fe      	b.n	8000448 <MemManage_Handler+0x4>

0800044a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800044e:	e7fe      	b.n	800044e <BusFault_Handler+0x4>

08000450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000454:	e7fe      	b.n	8000454 <UsageFault_Handler+0x4>

08000456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800045a:	bf00      	nop
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr

08000462 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr

0800046e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr

0800047a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800047e:	f000 f97b 	bl	8000778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800048c:	4802      	ldr	r0, [pc, #8]	; (8000498 <USART2_IRQHandler+0x10>)
 800048e:	f001 fa15 	bl	80018bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000094 	.word	0x20000094

0800049c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004a4:	f000 fce0 	bl	8000e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}

080004ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	60b9      	str	r1, [r7, #8]
 80004b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
 80004bc:	e00a      	b.n	80004d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004be:	f3af 8000 	nop.w
 80004c2:	4601      	mov	r1, r0
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	1c5a      	adds	r2, r3, #1
 80004c8:	60ba      	str	r2, [r7, #8]
 80004ca:	b2ca      	uxtb	r2, r1
 80004cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	3301      	adds	r3, #1
 80004d2:	617b      	str	r3, [r7, #20]
 80004d4:	697a      	ldr	r2, [r7, #20]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	429a      	cmp	r2, r3
 80004da:	dbf0      	blt.n	80004be <_read+0x12>
	}

return len;
 80004dc:	687b      	ldr	r3, [r7, #4]
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3718      	adds	r7, #24
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80004e6:	b480      	push	{r7}
 80004e8:	b083      	sub	sp, #12
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
	return -1;
 80004ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800050c:	605a      	str	r2, [r3, #4]
	return 0;
 800050e:	2300      	movs	r3, #0
}
 8000510:	4618      	mov	r0, r3
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr

0800051a <_isatty>:

int _isatty(int file)
{
 800051a:	b480      	push	{r7}
 800051c:	b083      	sub	sp, #12
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
	return 1;
 8000522:	2301      	movs	r3, #1
}
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr

0800052e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800052e:	b480      	push	{r7}
 8000530:	b085      	sub	sp, #20
 8000532:	af00      	add	r7, sp, #0
 8000534:	60f8      	str	r0, [r7, #12]
 8000536:	60b9      	str	r1, [r7, #8]
 8000538:	607a      	str	r2, [r7, #4]
	return 0;
 800053a:	2300      	movs	r3, #0
}
 800053c:	4618      	mov	r0, r3
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr
	...

08000548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000550:	4a14      	ldr	r2, [pc, #80]	; (80005a4 <_sbrk+0x5c>)
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <_sbrk+0x60>)
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <_sbrk+0x64>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d102      	bne.n	800056a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <_sbrk+0x64>)
 8000566:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <_sbrk+0x68>)
 8000568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800056a:	4b10      	ldr	r3, [pc, #64]	; (80005ac <_sbrk+0x64>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	693a      	ldr	r2, [r7, #16]
 8000574:	429a      	cmp	r2, r3
 8000576:	d207      	bcs.n	8000588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000578:	f001 ff20 	bl	80023bc <__errno>
 800057c:	4603      	mov	r3, r0
 800057e:	220c      	movs	r2, #12
 8000580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	e009      	b.n	800059c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <_sbrk+0x64>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <_sbrk+0x64>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	4a05      	ldr	r2, [pc, #20]	; (80005ac <_sbrk+0x64>)
 8000598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800059a:	68fb      	ldr	r3, [r7, #12]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20005000 	.word	0x20005000
 80005a8:	00000400 	.word	0x00000400
 80005ac:	20000090 	.word	0x20000090
 80005b0:	200000f0 	.word	0x200000f0

080005b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr

080005c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <MX_USART2_UART_Init+0x50>)
 80005c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005f8:	f001 f868 	bl	80016cc <HAL_UART_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000602:	f7ff fee2 	bl	80003ca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000094 	.word	0x20000094
 8000610:	40004400 	.word	0x40004400

08000614 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a19      	ldr	r2, [pc, #100]	; (8000694 <HAL_UART_MspInit+0x80>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d12b      	bne.n	800068c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <HAL_UART_MspInit+0x84>)
 8000636:	69db      	ldr	r3, [r3, #28]
 8000638:	4a17      	ldr	r2, [pc, #92]	; (8000698 <HAL_UART_MspInit+0x84>)
 800063a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800063e:	61d3      	str	r3, [r2, #28]
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <HAL_UART_MspInit+0x84>)
 8000642:	69db      	ldr	r3, [r3, #28]
 8000644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_UART_MspInit+0x84>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a11      	ldr	r2, [pc, #68]	; (8000698 <HAL_UART_MspInit+0x84>)
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <HAL_UART_MspInit+0x84>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0304 	and.w	r3, r3, #4
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000664:	230c      	movs	r3, #12
 8000666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000668:	2302      	movs	r3, #2
 800066a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2302      	movs	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	4619      	mov	r1, r3
 8000676:	4809      	ldr	r0, [pc, #36]	; (800069c <HAL_UART_MspInit+0x88>)
 8000678:	f000 fa5a 	bl	8000b30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	2026      	movs	r0, #38	; 0x26
 8000682:	f000 f96c 	bl	800095e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000686:	2026      	movs	r0, #38	; 0x26
 8000688:	f000 f985 	bl	8000996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800068c:	bf00      	nop
 800068e:	3720      	adds	r7, #32
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40004400 	.word	0x40004400
 8000698:	40021000 	.word	0x40021000
 800069c:	40010800 	.word	0x40010800

080006a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a0:	f7ff ff88 	bl	80005b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006a6:	490c      	ldr	r1, [pc, #48]	; (80006d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006a8:	4a0c      	ldr	r2, [pc, #48]	; (80006dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a09      	ldr	r2, [pc, #36]	; (80006e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006bc:	4c09      	ldr	r4, [pc, #36]	; (80006e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ca:	f001 fe7d 	bl	80023c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ce:	f7ff fe23 	bl	8000318 <main>
  bx lr
 80006d2:	4770      	bx	lr
  ldr r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006dc:	080034c4 	.word	0x080034c4
  ldr r2, =_sbss
 80006e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006e4:	200000f0 	.word	0x200000f0

080006e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_2_IRQHandler>
	...

080006ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <HAL_Init+0x28>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a07      	ldr	r2, [pc, #28]	; (8000714 <HAL_Init+0x28>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fc:	2003      	movs	r0, #3
 80006fe:	f000 f923 	bl	8000948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000702:	2000      	movs	r0, #0
 8000704:	f000 f808 	bl	8000718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000708:	f7ff fe64 	bl	80003d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40022000 	.word	0x40022000

08000718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_InitTick+0x54>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_InitTick+0x58>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000732:	fbb2 f3f3 	udiv	r3, r2, r3
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f93b 	bl	80009b2 <HAL_SYSTICK_Config>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e00e      	b.n	8000764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b0f      	cmp	r3, #15
 800074a:	d80a      	bhi.n	8000762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074c:	2200      	movs	r2, #0
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	f000 f903 	bl	800095e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000758:	4a06      	ldr	r2, [pc, #24]	; (8000774 <HAL_InitTick+0x5c>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800075e:	2300      	movs	r3, #0
 8000760:	e000      	b.n	8000764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
}
 8000764:	4618      	mov	r0, r3
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000000 	.word	0x20000000
 8000770:	20000008 	.word	0x20000008
 8000774:	20000004 	.word	0x20000004

08000778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_IncTick+0x1c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_IncTick+0x20>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4413      	add	r3, r2
 8000788:	4a03      	ldr	r2, [pc, #12]	; (8000798 <HAL_IncTick+0x20>)
 800078a:	6013      	str	r3, [r2, #0]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	20000008 	.word	0x20000008
 8000798:	200000dc 	.word	0x200000dc

0800079c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return uwTick;
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <HAL_GetTick+0x10>)
 80007a2:	681b      	ldr	r3, [r3, #0]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	200000dc 	.word	0x200000dc

080007b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e2:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	60d3      	str	r3, [r2, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <__NVIC_GetPriorityGrouping+0x18>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	f003 0307 	and.w	r3, r3, #7
}
 8000806:	4618      	mov	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	db0b      	blt.n	800083e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f003 021f 	and.w	r2, r3, #31
 800082c:	4906      	ldr	r1, [pc, #24]	; (8000848 <__NVIC_EnableIRQ+0x34>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	095b      	lsrs	r3, r3, #5
 8000834:	2001      	movs	r0, #1
 8000836:	fa00 f202 	lsl.w	r2, r0, r2
 800083a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	e000e100 	.word	0xe000e100

0800084c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	; (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	; (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b089      	sub	sp, #36	; 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	bf28      	it	cs
 80008be:	2304      	movcs	r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d902      	bls.n	80008d0 <NVIC_EncodePriority+0x30>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3b03      	subs	r3, #3
 80008ce:	e000      	b.n	80008d2 <NVIC_EncodePriority+0x32>
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43d9      	mvns	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	4313      	orrs	r3, r2
         );
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3724      	adds	r7, #36	; 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000914:	d301      	bcc.n	800091a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000916:	2301      	movs	r3, #1
 8000918:	e00f      	b.n	800093a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <SysTick_Config+0x40>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000922:	210f      	movs	r1, #15
 8000924:	f04f 30ff 	mov.w	r0, #4294967295
 8000928:	f7ff ff90 	bl	800084c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <SysTick_Config+0x40>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <SysTick_Config+0x40>)
 8000934:	2207      	movs	r2, #7
 8000936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	e000e010 	.word	0xe000e010

08000948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff2d 	bl	80007b0 <__NVIC_SetPriorityGrouping>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	4603      	mov	r3, r0
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000970:	f7ff ff42 	bl	80007f8 <__NVIC_GetPriorityGrouping>
 8000974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f7ff ff90 	bl	80008a0 <NVIC_EncodePriority>
 8000980:	4602      	mov	r2, r0
 8000982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff5f 	bl	800084c <__NVIC_SetPriority>
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff35 	bl	8000814 <__NVIC_EnableIRQ>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff ffa2 	bl	8000904 <SysTick_Config>
 80009c0:	4603      	mov	r3, r0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b085      	sub	sp, #20
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009d2:	2300      	movs	r3, #0
 80009d4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d008      	beq.n	80009f4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2204      	movs	r2, #4
 80009e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	e020      	b.n	8000a36 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f022 020e 	bic.w	r2, r2, #14
 8000a02:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f022 0201 	bic.w	r2, r2, #1
 8000a12:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a22:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2201      	movs	r2, #1
 8000a28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d005      	beq.n	8000a64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
 8000a62:	e051      	b.n	8000b08 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f022 020e 	bic.w	r2, r2, #14
 8000a72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f022 0201 	bic.w	r2, r2, #1
 8000a82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a22      	ldr	r2, [pc, #136]	; (8000b14 <HAL_DMA_Abort_IT+0xd4>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d029      	beq.n	8000ae2 <HAL_DMA_Abort_IT+0xa2>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <HAL_DMA_Abort_IT+0xd8>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d022      	beq.n	8000ade <HAL_DMA_Abort_IT+0x9e>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a1f      	ldr	r2, [pc, #124]	; (8000b1c <HAL_DMA_Abort_IT+0xdc>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d01a      	beq.n	8000ad8 <HAL_DMA_Abort_IT+0x98>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a1e      	ldr	r2, [pc, #120]	; (8000b20 <HAL_DMA_Abort_IT+0xe0>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d012      	beq.n	8000ad2 <HAL_DMA_Abort_IT+0x92>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <HAL_DMA_Abort_IT+0xe4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d00a      	beq.n	8000acc <HAL_DMA_Abort_IT+0x8c>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <HAL_DMA_Abort_IT+0xe8>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d102      	bne.n	8000ac6 <HAL_DMA_Abort_IT+0x86>
 8000ac0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ac4:	e00e      	b.n	8000ae4 <HAL_DMA_Abort_IT+0xa4>
 8000ac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aca:	e00b      	b.n	8000ae4 <HAL_DMA_Abort_IT+0xa4>
 8000acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad0:	e008      	b.n	8000ae4 <HAL_DMA_Abort_IT+0xa4>
 8000ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad6:	e005      	b.n	8000ae4 <HAL_DMA_Abort_IT+0xa4>
 8000ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000adc:	e002      	b.n	8000ae4 <HAL_DMA_Abort_IT+0xa4>
 8000ade:	2310      	movs	r3, #16
 8000ae0:	e000      	b.n	8000ae4 <HAL_DMA_Abort_IT+0xa4>
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	4a11      	ldr	r2, [pc, #68]	; (8000b2c <HAL_DMA_Abort_IT+0xec>)
 8000ae6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2201      	movs	r2, #1
 8000aec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2200      	movs	r2, #0
 8000af4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d003      	beq.n	8000b08 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	4798      	blx	r3
    } 
  }
  return status;
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40020008 	.word	0x40020008
 8000b18:	4002001c 	.word	0x4002001c
 8000b1c:	40020030 	.word	0x40020030
 8000b20:	40020044 	.word	0x40020044
 8000b24:	40020058 	.word	0x40020058
 8000b28:	4002006c 	.word	0x4002006c
 8000b2c:	40020000 	.word	0x40020000

08000b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b08b      	sub	sp, #44	; 0x2c
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b42:	e169      	b.n	8000e18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b44:	2201      	movs	r2, #1
 8000b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	69fa      	ldr	r2, [r7, #28]
 8000b54:	4013      	ands	r3, r2
 8000b56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	f040 8158 	bne.w	8000e12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	4a9a      	ldr	r2, [pc, #616]	; (8000dd0 <HAL_GPIO_Init+0x2a0>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d05e      	beq.n	8000c2a <HAL_GPIO_Init+0xfa>
 8000b6c:	4a98      	ldr	r2, [pc, #608]	; (8000dd0 <HAL_GPIO_Init+0x2a0>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d875      	bhi.n	8000c5e <HAL_GPIO_Init+0x12e>
 8000b72:	4a98      	ldr	r2, [pc, #608]	; (8000dd4 <HAL_GPIO_Init+0x2a4>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d058      	beq.n	8000c2a <HAL_GPIO_Init+0xfa>
 8000b78:	4a96      	ldr	r2, [pc, #600]	; (8000dd4 <HAL_GPIO_Init+0x2a4>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d86f      	bhi.n	8000c5e <HAL_GPIO_Init+0x12e>
 8000b7e:	4a96      	ldr	r2, [pc, #600]	; (8000dd8 <HAL_GPIO_Init+0x2a8>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d052      	beq.n	8000c2a <HAL_GPIO_Init+0xfa>
 8000b84:	4a94      	ldr	r2, [pc, #592]	; (8000dd8 <HAL_GPIO_Init+0x2a8>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d869      	bhi.n	8000c5e <HAL_GPIO_Init+0x12e>
 8000b8a:	4a94      	ldr	r2, [pc, #592]	; (8000ddc <HAL_GPIO_Init+0x2ac>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d04c      	beq.n	8000c2a <HAL_GPIO_Init+0xfa>
 8000b90:	4a92      	ldr	r2, [pc, #584]	; (8000ddc <HAL_GPIO_Init+0x2ac>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d863      	bhi.n	8000c5e <HAL_GPIO_Init+0x12e>
 8000b96:	4a92      	ldr	r2, [pc, #584]	; (8000de0 <HAL_GPIO_Init+0x2b0>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d046      	beq.n	8000c2a <HAL_GPIO_Init+0xfa>
 8000b9c:	4a90      	ldr	r2, [pc, #576]	; (8000de0 <HAL_GPIO_Init+0x2b0>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d85d      	bhi.n	8000c5e <HAL_GPIO_Init+0x12e>
 8000ba2:	2b12      	cmp	r3, #18
 8000ba4:	d82a      	bhi.n	8000bfc <HAL_GPIO_Init+0xcc>
 8000ba6:	2b12      	cmp	r3, #18
 8000ba8:	d859      	bhi.n	8000c5e <HAL_GPIO_Init+0x12e>
 8000baa:	a201      	add	r2, pc, #4	; (adr r2, 8000bb0 <HAL_GPIO_Init+0x80>)
 8000bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb0:	08000c2b 	.word	0x08000c2b
 8000bb4:	08000c05 	.word	0x08000c05
 8000bb8:	08000c17 	.word	0x08000c17
 8000bbc:	08000c59 	.word	0x08000c59
 8000bc0:	08000c5f 	.word	0x08000c5f
 8000bc4:	08000c5f 	.word	0x08000c5f
 8000bc8:	08000c5f 	.word	0x08000c5f
 8000bcc:	08000c5f 	.word	0x08000c5f
 8000bd0:	08000c5f 	.word	0x08000c5f
 8000bd4:	08000c5f 	.word	0x08000c5f
 8000bd8:	08000c5f 	.word	0x08000c5f
 8000bdc:	08000c5f 	.word	0x08000c5f
 8000be0:	08000c5f 	.word	0x08000c5f
 8000be4:	08000c5f 	.word	0x08000c5f
 8000be8:	08000c5f 	.word	0x08000c5f
 8000bec:	08000c5f 	.word	0x08000c5f
 8000bf0:	08000c5f 	.word	0x08000c5f
 8000bf4:	08000c0d 	.word	0x08000c0d
 8000bf8:	08000c21 	.word	0x08000c21
 8000bfc:	4a79      	ldr	r2, [pc, #484]	; (8000de4 <HAL_GPIO_Init+0x2b4>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d013      	beq.n	8000c2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c02:	e02c      	b.n	8000c5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	623b      	str	r3, [r7, #32]
          break;
 8000c0a:	e029      	b.n	8000c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	3304      	adds	r3, #4
 8000c12:	623b      	str	r3, [r7, #32]
          break;
 8000c14:	e024      	b.n	8000c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	3308      	adds	r3, #8
 8000c1c:	623b      	str	r3, [r7, #32]
          break;
 8000c1e:	e01f      	b.n	8000c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	330c      	adds	r3, #12
 8000c26:	623b      	str	r3, [r7, #32]
          break;
 8000c28:	e01a      	b.n	8000c60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d102      	bne.n	8000c38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c32:	2304      	movs	r3, #4
 8000c34:	623b      	str	r3, [r7, #32]
          break;
 8000c36:	e013      	b.n	8000c60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d105      	bne.n	8000c4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c40:	2308      	movs	r3, #8
 8000c42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	69fa      	ldr	r2, [r7, #28]
 8000c48:	611a      	str	r2, [r3, #16]
          break;
 8000c4a:	e009      	b.n	8000c60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69fa      	ldr	r2, [r7, #28]
 8000c54:	615a      	str	r2, [r3, #20]
          break;
 8000c56:	e003      	b.n	8000c60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
          break;
 8000c5c:	e000      	b.n	8000c60 <HAL_GPIO_Init+0x130>
          break;
 8000c5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	2bff      	cmp	r3, #255	; 0xff
 8000c64:	d801      	bhi.n	8000c6a <HAL_GPIO_Init+0x13a>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	e001      	b.n	8000c6e <HAL_GPIO_Init+0x13e>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	2bff      	cmp	r3, #255	; 0xff
 8000c74:	d802      	bhi.n	8000c7c <HAL_GPIO_Init+0x14c>
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	e002      	b.n	8000c82 <HAL_GPIO_Init+0x152>
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7e:	3b08      	subs	r3, #8
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	210f      	movs	r1, #15
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	401a      	ands	r2, r3
 8000c94:	6a39      	ldr	r1, [r7, #32]
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9c:	431a      	orrs	r2, r3
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f000 80b1 	beq.w	8000e12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cb0:	4b4d      	ldr	r3, [pc, #308]	; (8000de8 <HAL_GPIO_Init+0x2b8>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a4c      	ldr	r2, [pc, #304]	; (8000de8 <HAL_GPIO_Init+0x2b8>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b4a      	ldr	r3, [pc, #296]	; (8000de8 <HAL_GPIO_Init+0x2b8>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cc8:	4a48      	ldr	r2, [pc, #288]	; (8000dec <HAL_GPIO_Init+0x2bc>)
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	089b      	lsrs	r3, r3, #2
 8000cce:	3302      	adds	r3, #2
 8000cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	220f      	movs	r2, #15
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a40      	ldr	r2, [pc, #256]	; (8000df0 <HAL_GPIO_Init+0x2c0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d013      	beq.n	8000d1c <HAL_GPIO_Init+0x1ec>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a3f      	ldr	r2, [pc, #252]	; (8000df4 <HAL_GPIO_Init+0x2c4>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d00d      	beq.n	8000d18 <HAL_GPIO_Init+0x1e8>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a3e      	ldr	r2, [pc, #248]	; (8000df8 <HAL_GPIO_Init+0x2c8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d007      	beq.n	8000d14 <HAL_GPIO_Init+0x1e4>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a3d      	ldr	r2, [pc, #244]	; (8000dfc <HAL_GPIO_Init+0x2cc>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d101      	bne.n	8000d10 <HAL_GPIO_Init+0x1e0>
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e006      	b.n	8000d1e <HAL_GPIO_Init+0x1ee>
 8000d10:	2304      	movs	r3, #4
 8000d12:	e004      	b.n	8000d1e <HAL_GPIO_Init+0x1ee>
 8000d14:	2302      	movs	r3, #2
 8000d16:	e002      	b.n	8000d1e <HAL_GPIO_Init+0x1ee>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e000      	b.n	8000d1e <HAL_GPIO_Init+0x1ee>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d20:	f002 0203 	and.w	r2, r2, #3
 8000d24:	0092      	lsls	r2, r2, #2
 8000d26:	4093      	lsls	r3, r2
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d2e:	492f      	ldr	r1, [pc, #188]	; (8000dec <HAL_GPIO_Init+0x2bc>)
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	3302      	adds	r3, #2
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d006      	beq.n	8000d56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d48:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	492c      	ldr	r1, [pc, #176]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	608b      	str	r3, [r1, #8]
 8000d54:	e006      	b.n	8000d64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d56:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000d58:	689a      	ldr	r2, [r3, #8]
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	4928      	ldr	r1, [pc, #160]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000d60:	4013      	ands	r3, r2
 8000d62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d006      	beq.n	8000d7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d70:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	4922      	ldr	r1, [pc, #136]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	60cb      	str	r3, [r1, #12]
 8000d7c:	e006      	b.n	8000d8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d7e:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	491e      	ldr	r1, [pc, #120]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d006      	beq.n	8000da6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	4918      	ldr	r1, [pc, #96]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	604b      	str	r3, [r1, #4]
 8000da4:	e006      	b.n	8000db4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	43db      	mvns	r3, r3
 8000dae:	4914      	ldr	r1, [pc, #80]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000db0:	4013      	ands	r3, r2
 8000db2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d021      	beq.n	8000e04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	490e      	ldr	r1, [pc, #56]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	600b      	str	r3, [r1, #0]
 8000dcc:	e021      	b.n	8000e12 <HAL_GPIO_Init+0x2e2>
 8000dce:	bf00      	nop
 8000dd0:	10320000 	.word	0x10320000
 8000dd4:	10310000 	.word	0x10310000
 8000dd8:	10220000 	.word	0x10220000
 8000ddc:	10210000 	.word	0x10210000
 8000de0:	10120000 	.word	0x10120000
 8000de4:	10110000 	.word	0x10110000
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010000 	.word	0x40010000
 8000df0:	40010800 	.word	0x40010800
 8000df4:	40010c00 	.word	0x40010c00
 8000df8:	40011000 	.word	0x40011000
 8000dfc:	40011400 	.word	0x40011400
 8000e00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_GPIO_Init+0x304>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	4909      	ldr	r1, [pc, #36]	; (8000e34 <HAL_GPIO_Init+0x304>)
 8000e0e:	4013      	ands	r3, r2
 8000e10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	3301      	adds	r3, #1
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f47f ae8e 	bne.w	8000b44 <HAL_GPIO_Init+0x14>
  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	372c      	adds	r7, #44	; 0x2c
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	40010400 	.word	0x40010400

08000e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	807b      	strh	r3, [r7, #2]
 8000e44:	4613      	mov	r3, r2
 8000e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e48:	787b      	ldrb	r3, [r7, #1]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e4e:	887a      	ldrh	r2, [r7, #2]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e54:	e003      	b.n	8000e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e56:	887b      	ldrh	r3, [r7, #2]
 8000e58:	041a      	lsls	r2, r3, #16
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	611a      	str	r2, [r3, #16]
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e74:	695a      	ldr	r2, [r3, #20]
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d006      	beq.n	8000e8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e7e:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e80:	88fb      	ldrh	r3, [r7, #6]
 8000e82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f806 	bl	8000e98 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40010400 	.word	0x40010400

08000e98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d101      	bne.n	8000ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e272      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 8087 	beq.w	8000fda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ecc:	4b92      	ldr	r3, [pc, #584]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 030c 	and.w	r3, r3, #12
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d00c      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ed8:	4b8f      	ldr	r3, [pc, #572]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 030c 	and.w	r3, r3, #12
 8000ee0:	2b08      	cmp	r3, #8
 8000ee2:	d112      	bne.n	8000f0a <HAL_RCC_OscConfig+0x5e>
 8000ee4:	4b8c      	ldr	r3, [pc, #560]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef0:	d10b      	bne.n	8000f0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef2:	4b89      	ldr	r3, [pc, #548]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d06c      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x12c>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d168      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e24c      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f12:	d106      	bne.n	8000f22 <HAL_RCC_OscConfig+0x76>
 8000f14:	4b80      	ldr	r3, [pc, #512]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a7f      	ldr	r2, [pc, #508]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	e02e      	b.n	8000f80 <HAL_RCC_OscConfig+0xd4>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10c      	bne.n	8000f44 <HAL_RCC_OscConfig+0x98>
 8000f2a:	4b7b      	ldr	r3, [pc, #492]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a7a      	ldr	r2, [pc, #488]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	4b78      	ldr	r3, [pc, #480]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a77      	ldr	r2, [pc, #476]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e01d      	b.n	8000f80 <HAL_RCC_OscConfig+0xd4>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f4c:	d10c      	bne.n	8000f68 <HAL_RCC_OscConfig+0xbc>
 8000f4e:	4b72      	ldr	r3, [pc, #456]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a71      	ldr	r2, [pc, #452]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	4b6f      	ldr	r3, [pc, #444]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a6e      	ldr	r2, [pc, #440]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e00b      	b.n	8000f80 <HAL_RCC_OscConfig+0xd4>
 8000f68:	4b6b      	ldr	r3, [pc, #428]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a6a      	ldr	r2, [pc, #424]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b68      	ldr	r3, [pc, #416]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a67      	ldr	r2, [pc, #412]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d013      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f88:	f7ff fc08 	bl	800079c <HAL_GetTick>
 8000f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f90:	f7ff fc04 	bl	800079c <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b64      	cmp	r3, #100	; 0x64
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e200      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa2:	4b5d      	ldr	r3, [pc, #372]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0f0      	beq.n	8000f90 <HAL_RCC_OscConfig+0xe4>
 8000fae:	e014      	b.n	8000fda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fbf4 	bl	800079c <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb6:	e008      	b.n	8000fca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb8:	f7ff fbf0 	bl	800079c <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b64      	cmp	r3, #100	; 0x64
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e1ec      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fca:	4b53      	ldr	r3, [pc, #332]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f0      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x10c>
 8000fd6:	e000      	b.n	8000fda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d063      	beq.n	80010ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fe6:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00b      	beq.n	800100a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ff2:	4b49      	ldr	r3, [pc, #292]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
 8000ffa:	2b08      	cmp	r3, #8
 8000ffc:	d11c      	bne.n	8001038 <HAL_RCC_OscConfig+0x18c>
 8000ffe:	4b46      	ldr	r3, [pc, #280]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d116      	bne.n	8001038 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100a:	4b43      	ldr	r3, [pc, #268]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d005      	beq.n	8001022 <HAL_RCC_OscConfig+0x176>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d001      	beq.n	8001022 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e1c0      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001022:	4b3d      	ldr	r3, [pc, #244]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	4939      	ldr	r1, [pc, #228]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8001032:	4313      	orrs	r3, r2
 8001034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001036:	e03a      	b.n	80010ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d020      	beq.n	8001082 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001040:	4b36      	ldr	r3, [pc, #216]	; (800111c <HAL_RCC_OscConfig+0x270>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001046:	f7ff fba9 	bl	800079c <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800104e:	f7ff fba5 	bl	800079c <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e1a1      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001060:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0f0      	beq.n	800104e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106c:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4927      	ldr	r1, [pc, #156]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 800107c:	4313      	orrs	r3, r2
 800107e:	600b      	str	r3, [r1, #0]
 8001080:	e015      	b.n	80010ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <HAL_RCC_OscConfig+0x270>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001088:	f7ff fb88 	bl	800079c <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001090:	f7ff fb84 	bl	800079c <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e180      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f0      	bne.n	8001090 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d03a      	beq.n	8001130 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d019      	beq.n	80010f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <HAL_RCC_OscConfig+0x274>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c8:	f7ff fb68 	bl	800079c <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d0:	f7ff fb64 	bl	800079c <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e160      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0f0      	beq.n	80010d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f000 face 	bl	8001690 <RCC_Delay>
 80010f4:	e01c      	b.n	8001130 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_RCC_OscConfig+0x274>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fc:	f7ff fb4e 	bl	800079c <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001102:	e00f      	b.n	8001124 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001104:	f7ff fb4a 	bl	800079c <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d908      	bls.n	8001124 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e146      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000
 800111c:	42420000 	.word	0x42420000
 8001120:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001124:	4b92      	ldr	r3, [pc, #584]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1e9      	bne.n	8001104 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 80a6 	beq.w	800128a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001142:	4b8b      	ldr	r3, [pc, #556]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10d      	bne.n	800116a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b88      	ldr	r3, [pc, #544]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a87      	ldr	r2, [pc, #540]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b85      	ldr	r3, [pc, #532]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001166:	2301      	movs	r3, #1
 8001168:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116a:	4b82      	ldr	r3, [pc, #520]	; (8001374 <HAL_RCC_OscConfig+0x4c8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001172:	2b00      	cmp	r3, #0
 8001174:	d118      	bne.n	80011a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001176:	4b7f      	ldr	r3, [pc, #508]	; (8001374 <HAL_RCC_OscConfig+0x4c8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a7e      	ldr	r2, [pc, #504]	; (8001374 <HAL_RCC_OscConfig+0x4c8>)
 800117c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001182:	f7ff fb0b 	bl	800079c <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800118a:	f7ff fb07 	bl	800079c <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b64      	cmp	r3, #100	; 0x64
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e103      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800119c:	4b75      	ldr	r3, [pc, #468]	; (8001374 <HAL_RCC_OscConfig+0x4c8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f0      	beq.n	800118a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d106      	bne.n	80011be <HAL_RCC_OscConfig+0x312>
 80011b0:	4b6f      	ldr	r3, [pc, #444]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	4a6e      	ldr	r2, [pc, #440]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6213      	str	r3, [r2, #32]
 80011bc:	e02d      	b.n	800121a <HAL_RCC_OscConfig+0x36e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10c      	bne.n	80011e0 <HAL_RCC_OscConfig+0x334>
 80011c6:	4b6a      	ldr	r3, [pc, #424]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	4a69      	ldr	r2, [pc, #420]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	6213      	str	r3, [r2, #32]
 80011d2:	4b67      	ldr	r3, [pc, #412]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	4a66      	ldr	r2, [pc, #408]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	f023 0304 	bic.w	r3, r3, #4
 80011dc:	6213      	str	r3, [r2, #32]
 80011de:	e01c      	b.n	800121a <HAL_RCC_OscConfig+0x36e>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	2b05      	cmp	r3, #5
 80011e6:	d10c      	bne.n	8001202 <HAL_RCC_OscConfig+0x356>
 80011e8:	4b61      	ldr	r3, [pc, #388]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	4a60      	ldr	r2, [pc, #384]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6213      	str	r3, [r2, #32]
 80011f4:	4b5e      	ldr	r3, [pc, #376]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	4a5d      	ldr	r2, [pc, #372]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6213      	str	r3, [r2, #32]
 8001200:	e00b      	b.n	800121a <HAL_RCC_OscConfig+0x36e>
 8001202:	4b5b      	ldr	r3, [pc, #364]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	4a5a      	ldr	r2, [pc, #360]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	f023 0301 	bic.w	r3, r3, #1
 800120c:	6213      	str	r3, [r2, #32]
 800120e:	4b58      	ldr	r3, [pc, #352]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	4a57      	ldr	r2, [pc, #348]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	f023 0304 	bic.w	r3, r3, #4
 8001218:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d015      	beq.n	800124e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001222:	f7ff fabb 	bl	800079c <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001228:	e00a      	b.n	8001240 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800122a:	f7ff fab7 	bl	800079c <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	f241 3288 	movw	r2, #5000	; 0x1388
 8001238:	4293      	cmp	r3, r2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e0b1      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001240:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0ee      	beq.n	800122a <HAL_RCC_OscConfig+0x37e>
 800124c:	e014      	b.n	8001278 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124e:	f7ff faa5 	bl	800079c <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001254:	e00a      	b.n	800126c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001256:	f7ff faa1 	bl	800079c <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	f241 3288 	movw	r2, #5000	; 0x1388
 8001264:	4293      	cmp	r3, r2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e09b      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126c:	4b40      	ldr	r3, [pc, #256]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1ee      	bne.n	8001256 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d105      	bne.n	800128a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800127e:	4b3c      	ldr	r3, [pc, #240]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a3b      	ldr	r2, [pc, #236]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001288:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8087 	beq.w	80013a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001294:	4b36      	ldr	r3, [pc, #216]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b08      	cmp	r3, #8
 800129e:	d061      	beq.n	8001364 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d146      	bne.n	8001336 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a8:	4b33      	ldr	r3, [pc, #204]	; (8001378 <HAL_RCC_OscConfig+0x4cc>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ae:	f7ff fa75 	bl	800079c <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b6:	f7ff fa71 	bl	800079c <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e06d      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c8:	4b29      	ldr	r3, [pc, #164]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f0      	bne.n	80012b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012dc:	d108      	bne.n	80012f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012de:	4b24      	ldr	r3, [pc, #144]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	4921      	ldr	r1, [pc, #132]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012f0:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a19      	ldr	r1, [r3, #32]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	430b      	orrs	r3, r1
 8001302:	491b      	ldr	r1, [pc, #108]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_RCC_OscConfig+0x4cc>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130e:	f7ff fa45 	bl	800079c <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001316:	f7ff fa41 	bl	800079c <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e03d      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x46a>
 8001334:	e035      	b.n	80013a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <HAL_RCC_OscConfig+0x4cc>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fa2e 	bl	800079c <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001344:	f7ff fa2a 	bl	800079c <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e026      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x498>
 8001362:	e01e      	b.n	80013a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d107      	bne.n	800137c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e019      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
 8001370:	40021000 	.word	0x40021000
 8001374:	40007000 	.word	0x40007000
 8001378:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_RCC_OscConfig+0x500>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	429a      	cmp	r2, r3
 800138e:	d106      	bne.n	800139e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139a:	429a      	cmp	r2, r3
 800139c:	d001      	beq.n	80013a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e000      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021000 	.word	0x40021000

080013b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0d0      	b.n	8001566 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013c4:	4b6a      	ldr	r3, [pc, #424]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d910      	bls.n	80013f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d2:	4b67      	ldr	r3, [pc, #412]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 0207 	bic.w	r2, r3, #7
 80013da:	4965      	ldr	r1, [pc, #404]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	4313      	orrs	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e2:	4b63      	ldr	r3, [pc, #396]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d001      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e0b8      	b.n	8001566 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d020      	beq.n	8001442 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800140c:	4b59      	ldr	r3, [pc, #356]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	4a58      	ldr	r2, [pc, #352]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001416:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001424:	4b53      	ldr	r3, [pc, #332]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	4a52      	ldr	r2, [pc, #328]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800142e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001430:	4b50      	ldr	r3, [pc, #320]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	494d      	ldr	r1, [pc, #308]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 800143e:	4313      	orrs	r3, r2
 8001440:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d040      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d107      	bne.n	8001466 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	4b47      	ldr	r3, [pc, #284]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d115      	bne.n	800148e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e07f      	b.n	8001566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b02      	cmp	r3, #2
 800146c:	d107      	bne.n	800147e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146e:	4b41      	ldr	r3, [pc, #260]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d109      	bne.n	800148e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e073      	b.n	8001566 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147e:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e06b      	b.n	8001566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800148e:	4b39      	ldr	r3, [pc, #228]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f023 0203 	bic.w	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4936      	ldr	r1, [pc, #216]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a0:	f7ff f97c 	bl	800079c <HAL_GetTick>
 80014a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a6:	e00a      	b.n	80014be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a8:	f7ff f978 	bl	800079c <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e053      	b.n	8001566 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014be:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 020c 	and.w	r2, r3, #12
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d1eb      	bne.n	80014a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d210      	bcs.n	8001500 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 0207 	bic.w	r2, r3, #7
 80014e6:	4922      	ldr	r1, [pc, #136]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d001      	beq.n	8001500 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e032      	b.n	8001566 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	d008      	beq.n	800151e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	4916      	ldr	r1, [pc, #88]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	2b00      	cmp	r3, #0
 8001528:	d009      	beq.n	800153e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	490e      	ldr	r1, [pc, #56]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 800153a:	4313      	orrs	r3, r2
 800153c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800153e:	f000 f821 	bl	8001584 <HAL_RCC_GetSysClockFreq>
 8001542:	4602      	mov	r2, r0
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	490a      	ldr	r1, [pc, #40]	; (8001578 <HAL_RCC_ClockConfig+0x1c8>)
 8001550:	5ccb      	ldrb	r3, [r1, r3]
 8001552:	fa22 f303 	lsr.w	r3, r2, r3
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <HAL_RCC_ClockConfig+0x1cc>)
 8001558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_RCC_ClockConfig+0x1d0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff f8da 	bl	8000718 <HAL_InitTick>

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40022000 	.word	0x40022000
 8001574:	40021000 	.word	0x40021000
 8001578:	080033f8 	.word	0x080033f8
 800157c:	20000000 	.word	0x20000000
 8001580:	20000004 	.word	0x20000004

08001584 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001584:	b480      	push	{r7}
 8001586:	b087      	sub	sp, #28
 8001588:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800159e:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <HAL_RCC_GetSysClockFreq+0x94>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d002      	beq.n	80015b4 <HAL_RCC_GetSysClockFreq+0x30>
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d003      	beq.n	80015ba <HAL_RCC_GetSysClockFreq+0x36>
 80015b2:	e027      	b.n	8001604 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_RCC_GetSysClockFreq+0x98>)
 80015b6:	613b      	str	r3, [r7, #16]
      break;
 80015b8:	e027      	b.n	800160a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	0c9b      	lsrs	r3, r3, #18
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015c4:	5cd3      	ldrb	r3, [r2, r3]
 80015c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d010      	beq.n	80015f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_RCC_GetSysClockFreq+0x94>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	0c5b      	lsrs	r3, r3, #17
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	4a11      	ldr	r2, [pc, #68]	; (8001624 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015de:	5cd3      	ldrb	r3, [r2, r3]
 80015e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a0d      	ldr	r2, [pc, #52]	; (800161c <HAL_RCC_GetSysClockFreq+0x98>)
 80015e6:	fb03 f202 	mul.w	r2, r3, r2
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	e004      	b.n	80015fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a0c      	ldr	r2, [pc, #48]	; (8001628 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
 80015fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	613b      	str	r3, [r7, #16]
      break;
 8001602:	e002      	b.n	800160a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_RCC_GetSysClockFreq+0x98>)
 8001606:	613b      	str	r3, [r7, #16]
      break;
 8001608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800160a:	693b      	ldr	r3, [r7, #16]
}
 800160c:	4618      	mov	r0, r3
 800160e:	371c      	adds	r7, #28
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	007a1200 	.word	0x007a1200
 8001620:	08003410 	.word	0x08003410
 8001624:	08003420 	.word	0x08003420
 8001628:	003d0900 	.word	0x003d0900

0800162c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001630:	4b02      	ldr	r3, [pc, #8]	; (800163c <HAL_RCC_GetHCLKFreq+0x10>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	20000000 	.word	0x20000000

08001640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001644:	f7ff fff2 	bl	800162c <HAL_RCC_GetHCLKFreq>
 8001648:	4602      	mov	r2, r0
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	4903      	ldr	r1, [pc, #12]	; (8001664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001656:	5ccb      	ldrb	r3, [r1, r3]
 8001658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800165c:	4618      	mov	r0, r3
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000
 8001664:	08003408 	.word	0x08003408

08001668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800166c:	f7ff ffde 	bl	800162c <HAL_RCC_GetHCLKFreq>
 8001670:	4602      	mov	r2, r0
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	0adb      	lsrs	r3, r3, #11
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	4903      	ldr	r1, [pc, #12]	; (800168c <HAL_RCC_GetPCLK2Freq+0x24>)
 800167e:	5ccb      	ldrb	r3, [r1, r3]
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001684:	4618      	mov	r0, r3
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40021000 	.word	0x40021000
 800168c:	08003408 	.word	0x08003408

08001690 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <RCC_Delay+0x34>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <RCC_Delay+0x38>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	0a5b      	lsrs	r3, r3, #9
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	fb02 f303 	mul.w	r3, r2, r3
 80016aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016ac:	bf00      	nop
  }
  while (Delay --);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1e5a      	subs	r2, r3, #1
 80016b2:	60fa      	str	r2, [r7, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f9      	bne.n	80016ac <RCC_Delay+0x1c>
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	20000000 	.word	0x20000000
 80016c8:	10624dd3 	.word	0x10624dd3

080016cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e042      	b.n	8001764 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d106      	bne.n	80016f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7fe ff8e 	bl	8000614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2224      	movs	r2, #36	; 0x24
 80016fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800170e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 fdc5 	bl	80022a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	695a      	ldr	r2, [r3, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001734:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001744:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2220      	movs	r2, #32
 8001750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2220      	movs	r2, #32
 8001758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af02      	add	r7, sp, #8
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	4613      	mov	r3, r2
 800177a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b20      	cmp	r3, #32
 800178a:	d16d      	bne.n	8001868 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <HAL_UART_Transmit+0x2c>
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e066      	b.n	800186a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2221      	movs	r2, #33	; 0x21
 80017a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80017aa:	f7fe fff7 	bl	800079c <HAL_GetTick>
 80017ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	88fa      	ldrh	r2, [r7, #6]
 80017b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	88fa      	ldrh	r2, [r7, #6]
 80017ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017c4:	d108      	bne.n	80017d8 <HAL_UART_Transmit+0x6c>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d104      	bne.n	80017d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	61bb      	str	r3, [r7, #24]
 80017d6:	e003      	b.n	80017e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80017e0:	e02a      	b.n	8001838 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2200      	movs	r2, #0
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f000 fb14 	bl	8001e1a <UART_WaitOnFlagUntilTimeout>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e036      	b.n	800186a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10b      	bne.n	800181a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001810:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	3302      	adds	r3, #2
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	e007      	b.n	800182a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	781a      	ldrb	r2, [r3, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	3301      	adds	r3, #1
 8001828:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800182e:	b29b      	uxth	r3, r3
 8001830:	3b01      	subs	r3, #1
 8001832:	b29a      	uxth	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800183c:	b29b      	uxth	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1cf      	bne.n	80017e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2200      	movs	r2, #0
 800184a:	2140      	movs	r1, #64	; 0x40
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f000 fae4 	bl	8001e1a <UART_WaitOnFlagUntilTimeout>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e006      	b.n	800186a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2220      	movs	r2, #32
 8001860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	e000      	b.n	800186a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001868:	2302      	movs	r3, #2
  }
}
 800186a:	4618      	mov	r0, r3
 800186c:	3720      	adds	r7, #32
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	4613      	mov	r3, r2
 800187e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b20      	cmp	r3, #32
 800188a:	d112      	bne.n	80018b2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <HAL_UART_Receive_IT+0x26>
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e00b      	b.n	80018b4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	461a      	mov	r2, r3
 80018a6:	68b9      	ldr	r1, [r7, #8]
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 fb24 	bl	8001ef6 <UART_Start_Receive_IT>
 80018ae:	4603      	mov	r3, r0
 80018b0:	e000      	b.n	80018b4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80018b2:	2302      	movs	r3, #2
  }
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b0ba      	sub	sp, #232	; 0xe8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80018ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80018fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10f      	bne.n	8001922 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001906:	f003 0320 	and.w	r3, r3, #32
 800190a:	2b00      	cmp	r3, #0
 800190c:	d009      	beq.n	8001922 <HAL_UART_IRQHandler+0x66>
 800190e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001912:	f003 0320 	and.w	r3, r3, #32
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 fc01 	bl	8002122 <UART_Receive_IT>
      return;
 8001920:	e25b      	b.n	8001dda <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001922:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80de 	beq.w	8001ae8 <HAL_UART_IRQHandler+0x22c>
 800192c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d106      	bne.n	8001946 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800193c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 80d1 	beq.w	8001ae8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00b      	beq.n	800196a <HAL_UART_IRQHandler+0xae>
 8001952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f043 0201 	orr.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800196a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_UART_IRQHandler+0xd2>
 8001976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	f043 0202 	orr.w	r2, r3, #2
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800198e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <HAL_UART_IRQHandler+0xf6>
 800199a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d005      	beq.n	80019b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	f043 0204 	orr.w	r2, r3, #4
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80019b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d011      	beq.n	80019e2 <HAL_UART_IRQHandler+0x126>
 80019be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d105      	bne.n	80019d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80019ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f043 0208 	orr.w	r2, r3, #8
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 81f2 	beq.w	8001dd0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80019ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_UART_IRQHandler+0x14e>
 80019f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80019fc:	f003 0320 	and.w	r3, r3, #32
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 fb8c 	bl	8002122 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf14      	ite	ne
 8001a18:	2301      	movne	r3, #1
 8001a1a:	2300      	moveq	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d103      	bne.n	8001a36 <HAL_UART_IRQHandler+0x17a>
 8001a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d04f      	beq.n	8001ad6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fa96 	bl	8001f68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d041      	beq.n	8001ace <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	3314      	adds	r3, #20
 8001a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a58:	e853 3f00 	ldrex	r3, [r3]
 8001a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	3314      	adds	r3, #20
 8001a72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001a76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001a82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001a86:	e841 2300 	strex	r3, r2, [r1]
 8001a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001a8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1d9      	bne.n	8001a4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d013      	beq.n	8001ac6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa2:	4a7e      	ldr	r2, [pc, #504]	; (8001c9c <HAL_UART_IRQHandler+0x3e0>)
 8001aa4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe ffc8 	bl	8000a40 <HAL_DMA_Abort_IT>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d016      	beq.n	8001ae4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ac4:	e00e      	b.n	8001ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f993 	bl	8001df2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001acc:	e00a      	b.n	8001ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f98f 	bl	8001df2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ad4:	e006      	b.n	8001ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f98b 	bl	8001df2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001ae2:	e175      	b.n	8001dd0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ae4:	bf00      	nop
    return;
 8001ae6:	e173      	b.n	8001dd0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	f040 814f 	bne.w	8001d90 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8148 	beq.w	8001d90 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 8141 	beq.w	8001d90 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80b6 	beq.w	8001ca0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001b40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 8145 	beq.w	8001dd4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001b52:	429a      	cmp	r2, r3
 8001b54:	f080 813e 	bcs.w	8001dd4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001b5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	2b20      	cmp	r3, #32
 8001b68:	f000 8088 	beq.w	8001c7c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	330c      	adds	r3, #12
 8001b72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b7a:	e853 3f00 	ldrex	r3, [r3]
 8001b7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001b82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	330c      	adds	r3, #12
 8001b94:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001b98:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001b9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ba0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001ba4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ba8:	e841 2300 	strex	r3, r2, [r1]
 8001bac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1d9      	bne.n	8001b6c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3314      	adds	r3, #20
 8001bbe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bc2:	e853 3f00 	ldrex	r3, [r3]
 8001bc6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3314      	adds	r3, #20
 8001bd8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001bdc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001be0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001be2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001be4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001be8:	e841 2300 	strex	r3, r2, [r1]
 8001bec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1e1      	bne.n	8001bb8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3314      	adds	r3, #20
 8001bfa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bfe:	e853 3f00 	ldrex	r3, [r3]
 8001c02:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3314      	adds	r3, #20
 8001c14:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001c18:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001c1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001c20:	e841 2300 	strex	r3, r2, [r1]
 8001c24:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1e3      	bne.n	8001bf4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	330c      	adds	r3, #12
 8001c40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c44:	e853 3f00 	ldrex	r3, [r3]
 8001c48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c4c:	f023 0310 	bic.w	r3, r3, #16
 8001c50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	330c      	adds	r3, #12
 8001c5a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001c5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c60:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c66:	e841 2300 	strex	r3, r2, [r1]
 8001c6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1e3      	bne.n	8001c3a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fea7 	bl	80009ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	4619      	mov	r1, r3
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f8b6 	bl	8001e04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001c98:	e09c      	b.n	8001dd4 <HAL_UART_IRQHandler+0x518>
 8001c9a:	bf00      	nop
 8001c9c:	0800202d 	.word	0x0800202d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 808e 	beq.w	8001dd8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001cbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 8089 	beq.w	8001dd8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	330c      	adds	r3, #12
 8001ccc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cd0:	e853 3f00 	ldrex	r3, [r3]
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001cdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	330c      	adds	r3, #12
 8001ce6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001cea:	647a      	str	r2, [r7, #68]	; 0x44
 8001cec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001cf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001cf2:	e841 2300 	strex	r3, r2, [r1]
 8001cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1e3      	bne.n	8001cc6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3314      	adds	r3, #20
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	e853 3f00 	ldrex	r3, [r3]
 8001d0c:	623b      	str	r3, [r7, #32]
   return(result);
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	3314      	adds	r3, #20
 8001d1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001d22:	633a      	str	r2, [r7, #48]	; 0x30
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d2a:	e841 2300 	strex	r3, r2, [r1]
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1e3      	bne.n	8001cfe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	330c      	adds	r3, #12
 8001d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	e853 3f00 	ldrex	r3, [r3]
 8001d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f023 0310 	bic.w	r3, r3, #16
 8001d5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	330c      	adds	r3, #12
 8001d64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001d68:	61fa      	str	r2, [r7, #28]
 8001d6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d6c:	69b9      	ldr	r1, [r7, #24]
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	e841 2300 	strex	r3, r2, [r1]
 8001d74:	617b      	str	r3, [r7, #20]
   return(result);
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1e3      	bne.n	8001d44 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001d82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001d86:	4619      	mov	r1, r3
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f83b 	bl	8001e04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001d8e:	e023      	b.n	8001dd8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d009      	beq.n	8001db0 <HAL_UART_IRQHandler+0x4f4>
 8001d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f953 	bl	8002054 <UART_Transmit_IT>
    return;
 8001dae:	e014      	b.n	8001dda <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00e      	beq.n	8001dda <HAL_UART_IRQHandler+0x51e>
 8001dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f992 	bl	80020f2 <UART_EndTransmit_IT>
    return;
 8001dce:	e004      	b.n	8001dda <HAL_UART_IRQHandler+0x51e>
    return;
 8001dd0:	bf00      	nop
 8001dd2:	e002      	b.n	8001dda <HAL_UART_IRQHandler+0x51e>
      return;
 8001dd4:	bf00      	nop
 8001dd6:	e000      	b.n	8001dda <HAL_UART_IRQHandler+0x51e>
      return;
 8001dd8:	bf00      	nop
  }
}
 8001dda:	37e8      	adds	r7, #232	; 0xe8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b090      	sub	sp, #64	; 0x40
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	4613      	mov	r3, r2
 8001e28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e2a:	e050      	b.n	8001ece <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e32:	d04c      	beq.n	8001ece <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <UART_WaitOnFlagUntilTimeout+0x30>
 8001e3a:	f7fe fcaf 	bl	800079c <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d241      	bcs.n	8001ece <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	330c      	adds	r3, #12
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e54:	e853 3f00 	ldrex	r3, [r3]
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	330c      	adds	r3, #12
 8001e68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e6a:	637a      	str	r2, [r7, #52]	; 0x34
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e72:	e841 2300 	strex	r3, r2, [r1]
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1e5      	bne.n	8001e4a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	3314      	adds	r3, #20
 8001e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	e853 3f00 	ldrex	r3, [r3]
 8001e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3314      	adds	r3, #20
 8001e9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e9e:	623a      	str	r2, [r7, #32]
 8001ea0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ea2:	69f9      	ldr	r1, [r7, #28]
 8001ea4:	6a3a      	ldr	r2, [r7, #32]
 8001ea6:	e841 2300 	strex	r3, r2, [r1]
 8001eaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1e5      	bne.n	8001e7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e00f      	b.n	8001eee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	bf0c      	ite	eq
 8001ede:	2301      	moveq	r3, #1
 8001ee0:	2300      	movne	r3, #0
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d09f      	beq.n	8001e2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3740      	adds	r7, #64	; 0x40
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b085      	sub	sp, #20
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	4613      	mov	r3, r2
 8001f02:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	88fa      	ldrh	r2, [r7, #6]
 8001f0e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	88fa      	ldrh	r2, [r7, #6]
 8001f14:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2222      	movs	r2, #34	; 0x22
 8001f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f3a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0220 	orr.w	r2, r2, #32
 8001f5a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b095      	sub	sp, #84	; 0x54
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	330c      	adds	r3, #12
 8001f76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7a:	e853 3f00 	ldrex	r3, [r3]
 8001f7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	330c      	adds	r3, #12
 8001f8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f90:	643a      	str	r2, [r7, #64]	; 0x40
 8001f92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f98:	e841 2300 	strex	r3, r2, [r1]
 8001f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1e5      	bne.n	8001f70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3314      	adds	r3, #20
 8001faa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	e853 3f00 	ldrex	r3, [r3]
 8001fb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	3314      	adds	r3, #20
 8001fc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fcc:	e841 2300 	strex	r3, r2, [r1]
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1e5      	bne.n	8001fa4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d119      	bne.n	8002014 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	330c      	adds	r3, #12
 8001fe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	e853 3f00 	ldrex	r3, [r3]
 8001fee:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f023 0310 	bic.w	r3, r3, #16
 8001ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	330c      	adds	r3, #12
 8001ffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002000:	61ba      	str	r2, [r7, #24]
 8002002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002004:	6979      	ldr	r1, [r7, #20]
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	e841 2300 	strex	r3, r2, [r1]
 800200c:	613b      	str	r3, [r7, #16]
   return(result);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1e5      	bne.n	8001fe0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002022:	bf00      	nop
 8002024:	3754      	adds	r7, #84	; 0x54
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f7ff fed3 	bl	8001df2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800204c:	bf00      	nop
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b21      	cmp	r3, #33	; 0x21
 8002066:	d13e      	bne.n	80020e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002070:	d114      	bne.n	800209c <UART_Transmit_IT+0x48>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d110      	bne.n	800209c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800208e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	1c9a      	adds	r2, r3, #2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	621a      	str	r2, [r3, #32]
 800209a:	e008      	b.n	80020ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	1c59      	adds	r1, r3, #1
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6211      	str	r1, [r2, #32]
 80020a6:	781a      	ldrb	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4619      	mov	r1, r3
 80020bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10f      	bne.n	80020e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e000      	b.n	80020e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80020e6:	2302      	movs	r3, #2
  }
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002108:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2220      	movs	r2, #32
 800210e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fe64 	bl	8001de0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b08c      	sub	sp, #48	; 0x30
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b22      	cmp	r3, #34	; 0x22
 8002134:	f040 80ae 	bne.w	8002294 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002140:	d117      	bne.n	8002172 <UART_Receive_IT+0x50>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d113      	bne.n	8002172 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800214a:	2300      	movs	r3, #0
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	b29b      	uxth	r3, r3
 800215c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002160:	b29a      	uxth	r2, r3
 8002162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002164:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	1c9a      	adds	r2, r3, #2
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
 8002170:	e026      	b.n	80021c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002178:	2300      	movs	r3, #0
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002184:	d007      	beq.n	8002196 <UART_Receive_IT+0x74>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10a      	bne.n	80021a4 <UART_Receive_IT+0x82>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a0:	701a      	strb	r2, [r3, #0]
 80021a2:	e008      	b.n	80021b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4619      	mov	r1, r3
 80021ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d15d      	bne.n	8002290 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0220 	bic.w	r2, r2, #32
 80021e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0201 	bic.w	r2, r2, #1
 8002202:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	2b01      	cmp	r3, #1
 8002218:	d135      	bne.n	8002286 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	330c      	adds	r3, #12
 8002226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	e853 3f00 	ldrex	r3, [r3]
 800222e:	613b      	str	r3, [r7, #16]
   return(result);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f023 0310 	bic.w	r3, r3, #16
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	330c      	adds	r3, #12
 800223e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002240:	623a      	str	r2, [r7, #32]
 8002242:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002244:	69f9      	ldr	r1, [r7, #28]
 8002246:	6a3a      	ldr	r2, [r7, #32]
 8002248:	e841 2300 	strex	r3, r2, [r1]
 800224c:	61bb      	str	r3, [r7, #24]
   return(result);
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1e5      	bne.n	8002220 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	2b10      	cmp	r3, #16
 8002260:	d10a      	bne.n	8002278 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800227c:	4619      	mov	r1, r3
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff fdc0 	bl	8001e04 <HAL_UARTEx_RxEventCallback>
 8002284:	e002      	b.n	800228c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fd ffe2 	bl	8000250 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	e002      	b.n	8002296 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e000      	b.n	8002296 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002294:	2302      	movs	r3, #2
  }
}
 8002296:	4618      	mov	r0, r3
 8002298:	3730      	adds	r7, #48	; 0x30
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022da:	f023 030c 	bic.w	r3, r3, #12
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	68b9      	ldr	r1, [r7, #8]
 80022e4:	430b      	orrs	r3, r1
 80022e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a2c      	ldr	r2, [pc, #176]	; (80023b4 <UART_SetConfig+0x114>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d103      	bne.n	8002310 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002308:	f7ff f9ae 	bl	8001668 <HAL_RCC_GetPCLK2Freq>
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	e002      	b.n	8002316 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002310:	f7ff f996 	bl	8001640 <HAL_RCC_GetPCLK1Freq>
 8002314:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	009a      	lsls	r2, r3, #2
 8002320:	441a      	add	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	fbb2 f3f3 	udiv	r3, r2, r3
 800232c:	4a22      	ldr	r2, [pc, #136]	; (80023b8 <UART_SetConfig+0x118>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	0119      	lsls	r1, r3, #4
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	009a      	lsls	r2, r3, #2
 8002340:	441a      	add	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	fbb2 f2f3 	udiv	r2, r2, r3
 800234c:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <UART_SetConfig+0x118>)
 800234e:	fba3 0302 	umull	r0, r3, r3, r2
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	2064      	movs	r0, #100	; 0x64
 8002356:	fb00 f303 	mul.w	r3, r0, r3
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	3332      	adds	r3, #50	; 0x32
 8002360:	4a15      	ldr	r2, [pc, #84]	; (80023b8 <UART_SetConfig+0x118>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800236c:	4419      	add	r1, r3
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	009a      	lsls	r2, r3, #2
 8002378:	441a      	add	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	fbb2 f2f3 	udiv	r2, r2, r3
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <UART_SetConfig+0x118>)
 8002386:	fba3 0302 	umull	r0, r3, r3, r2
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	2064      	movs	r0, #100	; 0x64
 800238e:	fb00 f303 	mul.w	r3, r0, r3
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	3332      	adds	r3, #50	; 0x32
 8002398:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <UART_SetConfig+0x118>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	f003 020f 	and.w	r2, r3, #15
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	440a      	add	r2, r1
 80023aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40013800 	.word	0x40013800
 80023b8:	51eb851f 	.word	0x51eb851f

080023bc <__errno>:
 80023bc:	4b01      	ldr	r3, [pc, #4]	; (80023c4 <__errno+0x8>)
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	2000000c 	.word	0x2000000c

080023c8 <__libc_init_array>:
 80023c8:	b570      	push	{r4, r5, r6, lr}
 80023ca:	2600      	movs	r6, #0
 80023cc:	4d0c      	ldr	r5, [pc, #48]	; (8002400 <__libc_init_array+0x38>)
 80023ce:	4c0d      	ldr	r4, [pc, #52]	; (8002404 <__libc_init_array+0x3c>)
 80023d0:	1b64      	subs	r4, r4, r5
 80023d2:	10a4      	asrs	r4, r4, #2
 80023d4:	42a6      	cmp	r6, r4
 80023d6:	d109      	bne.n	80023ec <__libc_init_array+0x24>
 80023d8:	f000 ffb6 	bl	8003348 <_init>
 80023dc:	2600      	movs	r6, #0
 80023de:	4d0a      	ldr	r5, [pc, #40]	; (8002408 <__libc_init_array+0x40>)
 80023e0:	4c0a      	ldr	r4, [pc, #40]	; (800240c <__libc_init_array+0x44>)
 80023e2:	1b64      	subs	r4, r4, r5
 80023e4:	10a4      	asrs	r4, r4, #2
 80023e6:	42a6      	cmp	r6, r4
 80023e8:	d105      	bne.n	80023f6 <__libc_init_array+0x2e>
 80023ea:	bd70      	pop	{r4, r5, r6, pc}
 80023ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80023f0:	4798      	blx	r3
 80023f2:	3601      	adds	r6, #1
 80023f4:	e7ee      	b.n	80023d4 <__libc_init_array+0xc>
 80023f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80023fa:	4798      	blx	r3
 80023fc:	3601      	adds	r6, #1
 80023fe:	e7f2      	b.n	80023e6 <__libc_init_array+0x1e>
 8002400:	080034bc 	.word	0x080034bc
 8002404:	080034bc 	.word	0x080034bc
 8002408:	080034bc 	.word	0x080034bc
 800240c:	080034c0 	.word	0x080034c0

08002410 <memset>:
 8002410:	4603      	mov	r3, r0
 8002412:	4402      	add	r2, r0
 8002414:	4293      	cmp	r3, r2
 8002416:	d100      	bne.n	800241a <memset+0xa>
 8002418:	4770      	bx	lr
 800241a:	f803 1b01 	strb.w	r1, [r3], #1
 800241e:	e7f9      	b.n	8002414 <memset+0x4>

08002420 <iprintf>:
 8002420:	b40f      	push	{r0, r1, r2, r3}
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <iprintf+0x2c>)
 8002424:	b513      	push	{r0, r1, r4, lr}
 8002426:	681c      	ldr	r4, [r3, #0]
 8002428:	b124      	cbz	r4, 8002434 <iprintf+0x14>
 800242a:	69a3      	ldr	r3, [r4, #24]
 800242c:	b913      	cbnz	r3, 8002434 <iprintf+0x14>
 800242e:	4620      	mov	r0, r4
 8002430:	f000 f866 	bl	8002500 <__sinit>
 8002434:	ab05      	add	r3, sp, #20
 8002436:	4620      	mov	r0, r4
 8002438:	9a04      	ldr	r2, [sp, #16]
 800243a:	68a1      	ldr	r1, [r4, #8]
 800243c:	9301      	str	r3, [sp, #4]
 800243e:	f000 f9bb 	bl	80027b8 <_vfiprintf_r>
 8002442:	b002      	add	sp, #8
 8002444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002448:	b004      	add	sp, #16
 800244a:	4770      	bx	lr
 800244c:	2000000c 	.word	0x2000000c

08002450 <std>:
 8002450:	2300      	movs	r3, #0
 8002452:	b510      	push	{r4, lr}
 8002454:	4604      	mov	r4, r0
 8002456:	e9c0 3300 	strd	r3, r3, [r0]
 800245a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800245e:	6083      	str	r3, [r0, #8]
 8002460:	8181      	strh	r1, [r0, #12]
 8002462:	6643      	str	r3, [r0, #100]	; 0x64
 8002464:	81c2      	strh	r2, [r0, #14]
 8002466:	6183      	str	r3, [r0, #24]
 8002468:	4619      	mov	r1, r3
 800246a:	2208      	movs	r2, #8
 800246c:	305c      	adds	r0, #92	; 0x5c
 800246e:	f7ff ffcf 	bl	8002410 <memset>
 8002472:	4b05      	ldr	r3, [pc, #20]	; (8002488 <std+0x38>)
 8002474:	6224      	str	r4, [r4, #32]
 8002476:	6263      	str	r3, [r4, #36]	; 0x24
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <std+0x3c>)
 800247a:	62a3      	str	r3, [r4, #40]	; 0x28
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <std+0x40>)
 800247e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <std+0x44>)
 8002482:	6323      	str	r3, [r4, #48]	; 0x30
 8002484:	bd10      	pop	{r4, pc}
 8002486:	bf00      	nop
 8002488:	08002d65 	.word	0x08002d65
 800248c:	08002d87 	.word	0x08002d87
 8002490:	08002dbf 	.word	0x08002dbf
 8002494:	08002de3 	.word	0x08002de3

08002498 <_cleanup_r>:
 8002498:	4901      	ldr	r1, [pc, #4]	; (80024a0 <_cleanup_r+0x8>)
 800249a:	f000 b8af 	b.w	80025fc <_fwalk_reent>
 800249e:	bf00      	nop
 80024a0:	080030b5 	.word	0x080030b5

080024a4 <__sfmoreglue>:
 80024a4:	2268      	movs	r2, #104	; 0x68
 80024a6:	b570      	push	{r4, r5, r6, lr}
 80024a8:	1e4d      	subs	r5, r1, #1
 80024aa:	4355      	muls	r5, r2
 80024ac:	460e      	mov	r6, r1
 80024ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80024b2:	f000 f8e5 	bl	8002680 <_malloc_r>
 80024b6:	4604      	mov	r4, r0
 80024b8:	b140      	cbz	r0, 80024cc <__sfmoreglue+0x28>
 80024ba:	2100      	movs	r1, #0
 80024bc:	e9c0 1600 	strd	r1, r6, [r0]
 80024c0:	300c      	adds	r0, #12
 80024c2:	60a0      	str	r0, [r4, #8]
 80024c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80024c8:	f7ff ffa2 	bl	8002410 <memset>
 80024cc:	4620      	mov	r0, r4
 80024ce:	bd70      	pop	{r4, r5, r6, pc}

080024d0 <__sfp_lock_acquire>:
 80024d0:	4801      	ldr	r0, [pc, #4]	; (80024d8 <__sfp_lock_acquire+0x8>)
 80024d2:	f000 b8b3 	b.w	800263c <__retarget_lock_acquire_recursive>
 80024d6:	bf00      	nop
 80024d8:	200000e1 	.word	0x200000e1

080024dc <__sfp_lock_release>:
 80024dc:	4801      	ldr	r0, [pc, #4]	; (80024e4 <__sfp_lock_release+0x8>)
 80024de:	f000 b8ae 	b.w	800263e <__retarget_lock_release_recursive>
 80024e2:	bf00      	nop
 80024e4:	200000e1 	.word	0x200000e1

080024e8 <__sinit_lock_acquire>:
 80024e8:	4801      	ldr	r0, [pc, #4]	; (80024f0 <__sinit_lock_acquire+0x8>)
 80024ea:	f000 b8a7 	b.w	800263c <__retarget_lock_acquire_recursive>
 80024ee:	bf00      	nop
 80024f0:	200000e2 	.word	0x200000e2

080024f4 <__sinit_lock_release>:
 80024f4:	4801      	ldr	r0, [pc, #4]	; (80024fc <__sinit_lock_release+0x8>)
 80024f6:	f000 b8a2 	b.w	800263e <__retarget_lock_release_recursive>
 80024fa:	bf00      	nop
 80024fc:	200000e2 	.word	0x200000e2

08002500 <__sinit>:
 8002500:	b510      	push	{r4, lr}
 8002502:	4604      	mov	r4, r0
 8002504:	f7ff fff0 	bl	80024e8 <__sinit_lock_acquire>
 8002508:	69a3      	ldr	r3, [r4, #24]
 800250a:	b11b      	cbz	r3, 8002514 <__sinit+0x14>
 800250c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002510:	f7ff bff0 	b.w	80024f4 <__sinit_lock_release>
 8002514:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002518:	6523      	str	r3, [r4, #80]	; 0x50
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <__sinit+0x68>)
 800251c:	4a13      	ldr	r2, [pc, #76]	; (800256c <__sinit+0x6c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	62a2      	str	r2, [r4, #40]	; 0x28
 8002522:	42a3      	cmp	r3, r4
 8002524:	bf08      	it	eq
 8002526:	2301      	moveq	r3, #1
 8002528:	4620      	mov	r0, r4
 800252a:	bf08      	it	eq
 800252c:	61a3      	streq	r3, [r4, #24]
 800252e:	f000 f81f 	bl	8002570 <__sfp>
 8002532:	6060      	str	r0, [r4, #4]
 8002534:	4620      	mov	r0, r4
 8002536:	f000 f81b 	bl	8002570 <__sfp>
 800253a:	60a0      	str	r0, [r4, #8]
 800253c:	4620      	mov	r0, r4
 800253e:	f000 f817 	bl	8002570 <__sfp>
 8002542:	2200      	movs	r2, #0
 8002544:	2104      	movs	r1, #4
 8002546:	60e0      	str	r0, [r4, #12]
 8002548:	6860      	ldr	r0, [r4, #4]
 800254a:	f7ff ff81 	bl	8002450 <std>
 800254e:	2201      	movs	r2, #1
 8002550:	2109      	movs	r1, #9
 8002552:	68a0      	ldr	r0, [r4, #8]
 8002554:	f7ff ff7c 	bl	8002450 <std>
 8002558:	2202      	movs	r2, #2
 800255a:	2112      	movs	r1, #18
 800255c:	68e0      	ldr	r0, [r4, #12]
 800255e:	f7ff ff77 	bl	8002450 <std>
 8002562:	2301      	movs	r3, #1
 8002564:	61a3      	str	r3, [r4, #24]
 8002566:	e7d1      	b.n	800250c <__sinit+0xc>
 8002568:	08003424 	.word	0x08003424
 800256c:	08002499 	.word	0x08002499

08002570 <__sfp>:
 8002570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002572:	4607      	mov	r7, r0
 8002574:	f7ff ffac 	bl	80024d0 <__sfp_lock_acquire>
 8002578:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <__sfp+0x84>)
 800257a:	681e      	ldr	r6, [r3, #0]
 800257c:	69b3      	ldr	r3, [r6, #24]
 800257e:	b913      	cbnz	r3, 8002586 <__sfp+0x16>
 8002580:	4630      	mov	r0, r6
 8002582:	f7ff ffbd 	bl	8002500 <__sinit>
 8002586:	3648      	adds	r6, #72	; 0x48
 8002588:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800258c:	3b01      	subs	r3, #1
 800258e:	d503      	bpl.n	8002598 <__sfp+0x28>
 8002590:	6833      	ldr	r3, [r6, #0]
 8002592:	b30b      	cbz	r3, 80025d8 <__sfp+0x68>
 8002594:	6836      	ldr	r6, [r6, #0]
 8002596:	e7f7      	b.n	8002588 <__sfp+0x18>
 8002598:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800259c:	b9d5      	cbnz	r5, 80025d4 <__sfp+0x64>
 800259e:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <__sfp+0x88>)
 80025a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80025a4:	60e3      	str	r3, [r4, #12]
 80025a6:	6665      	str	r5, [r4, #100]	; 0x64
 80025a8:	f000 f847 	bl	800263a <__retarget_lock_init_recursive>
 80025ac:	f7ff ff96 	bl	80024dc <__sfp_lock_release>
 80025b0:	2208      	movs	r2, #8
 80025b2:	4629      	mov	r1, r5
 80025b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80025b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80025bc:	6025      	str	r5, [r4, #0]
 80025be:	61a5      	str	r5, [r4, #24]
 80025c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80025c4:	f7ff ff24 	bl	8002410 <memset>
 80025c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80025cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80025d0:	4620      	mov	r0, r4
 80025d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025d4:	3468      	adds	r4, #104	; 0x68
 80025d6:	e7d9      	b.n	800258c <__sfp+0x1c>
 80025d8:	2104      	movs	r1, #4
 80025da:	4638      	mov	r0, r7
 80025dc:	f7ff ff62 	bl	80024a4 <__sfmoreglue>
 80025e0:	4604      	mov	r4, r0
 80025e2:	6030      	str	r0, [r6, #0]
 80025e4:	2800      	cmp	r0, #0
 80025e6:	d1d5      	bne.n	8002594 <__sfp+0x24>
 80025e8:	f7ff ff78 	bl	80024dc <__sfp_lock_release>
 80025ec:	230c      	movs	r3, #12
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	e7ee      	b.n	80025d0 <__sfp+0x60>
 80025f2:	bf00      	nop
 80025f4:	08003424 	.word	0x08003424
 80025f8:	ffff0001 	.word	0xffff0001

080025fc <_fwalk_reent>:
 80025fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002600:	4606      	mov	r6, r0
 8002602:	4688      	mov	r8, r1
 8002604:	2700      	movs	r7, #0
 8002606:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800260a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800260e:	f1b9 0901 	subs.w	r9, r9, #1
 8002612:	d505      	bpl.n	8002620 <_fwalk_reent+0x24>
 8002614:	6824      	ldr	r4, [r4, #0]
 8002616:	2c00      	cmp	r4, #0
 8002618:	d1f7      	bne.n	800260a <_fwalk_reent+0xe>
 800261a:	4638      	mov	r0, r7
 800261c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002620:	89ab      	ldrh	r3, [r5, #12]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d907      	bls.n	8002636 <_fwalk_reent+0x3a>
 8002626:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800262a:	3301      	adds	r3, #1
 800262c:	d003      	beq.n	8002636 <_fwalk_reent+0x3a>
 800262e:	4629      	mov	r1, r5
 8002630:	4630      	mov	r0, r6
 8002632:	47c0      	blx	r8
 8002634:	4307      	orrs	r7, r0
 8002636:	3568      	adds	r5, #104	; 0x68
 8002638:	e7e9      	b.n	800260e <_fwalk_reent+0x12>

0800263a <__retarget_lock_init_recursive>:
 800263a:	4770      	bx	lr

0800263c <__retarget_lock_acquire_recursive>:
 800263c:	4770      	bx	lr

0800263e <__retarget_lock_release_recursive>:
 800263e:	4770      	bx	lr

08002640 <sbrk_aligned>:
 8002640:	b570      	push	{r4, r5, r6, lr}
 8002642:	4e0e      	ldr	r6, [pc, #56]	; (800267c <sbrk_aligned+0x3c>)
 8002644:	460c      	mov	r4, r1
 8002646:	6831      	ldr	r1, [r6, #0]
 8002648:	4605      	mov	r5, r0
 800264a:	b911      	cbnz	r1, 8002652 <sbrk_aligned+0x12>
 800264c:	f000 fb7a 	bl	8002d44 <_sbrk_r>
 8002650:	6030      	str	r0, [r6, #0]
 8002652:	4621      	mov	r1, r4
 8002654:	4628      	mov	r0, r5
 8002656:	f000 fb75 	bl	8002d44 <_sbrk_r>
 800265a:	1c43      	adds	r3, r0, #1
 800265c:	d00a      	beq.n	8002674 <sbrk_aligned+0x34>
 800265e:	1cc4      	adds	r4, r0, #3
 8002660:	f024 0403 	bic.w	r4, r4, #3
 8002664:	42a0      	cmp	r0, r4
 8002666:	d007      	beq.n	8002678 <sbrk_aligned+0x38>
 8002668:	1a21      	subs	r1, r4, r0
 800266a:	4628      	mov	r0, r5
 800266c:	f000 fb6a 	bl	8002d44 <_sbrk_r>
 8002670:	3001      	adds	r0, #1
 8002672:	d101      	bne.n	8002678 <sbrk_aligned+0x38>
 8002674:	f04f 34ff 	mov.w	r4, #4294967295
 8002678:	4620      	mov	r0, r4
 800267a:	bd70      	pop	{r4, r5, r6, pc}
 800267c:	200000e8 	.word	0x200000e8

08002680 <_malloc_r>:
 8002680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002684:	1ccd      	adds	r5, r1, #3
 8002686:	f025 0503 	bic.w	r5, r5, #3
 800268a:	3508      	adds	r5, #8
 800268c:	2d0c      	cmp	r5, #12
 800268e:	bf38      	it	cc
 8002690:	250c      	movcc	r5, #12
 8002692:	2d00      	cmp	r5, #0
 8002694:	4607      	mov	r7, r0
 8002696:	db01      	blt.n	800269c <_malloc_r+0x1c>
 8002698:	42a9      	cmp	r1, r5
 800269a:	d905      	bls.n	80026a8 <_malloc_r+0x28>
 800269c:	230c      	movs	r3, #12
 800269e:	2600      	movs	r6, #0
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	4630      	mov	r0, r6
 80026a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026a8:	4e2e      	ldr	r6, [pc, #184]	; (8002764 <_malloc_r+0xe4>)
 80026aa:	f000 fdc5 	bl	8003238 <__malloc_lock>
 80026ae:	6833      	ldr	r3, [r6, #0]
 80026b0:	461c      	mov	r4, r3
 80026b2:	bb34      	cbnz	r4, 8002702 <_malloc_r+0x82>
 80026b4:	4629      	mov	r1, r5
 80026b6:	4638      	mov	r0, r7
 80026b8:	f7ff ffc2 	bl	8002640 <sbrk_aligned>
 80026bc:	1c43      	adds	r3, r0, #1
 80026be:	4604      	mov	r4, r0
 80026c0:	d14d      	bne.n	800275e <_malloc_r+0xde>
 80026c2:	6834      	ldr	r4, [r6, #0]
 80026c4:	4626      	mov	r6, r4
 80026c6:	2e00      	cmp	r6, #0
 80026c8:	d140      	bne.n	800274c <_malloc_r+0xcc>
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	4631      	mov	r1, r6
 80026ce:	4638      	mov	r0, r7
 80026d0:	eb04 0803 	add.w	r8, r4, r3
 80026d4:	f000 fb36 	bl	8002d44 <_sbrk_r>
 80026d8:	4580      	cmp	r8, r0
 80026da:	d13a      	bne.n	8002752 <_malloc_r+0xd2>
 80026dc:	6821      	ldr	r1, [r4, #0]
 80026de:	3503      	adds	r5, #3
 80026e0:	1a6d      	subs	r5, r5, r1
 80026e2:	f025 0503 	bic.w	r5, r5, #3
 80026e6:	3508      	adds	r5, #8
 80026e8:	2d0c      	cmp	r5, #12
 80026ea:	bf38      	it	cc
 80026ec:	250c      	movcc	r5, #12
 80026ee:	4638      	mov	r0, r7
 80026f0:	4629      	mov	r1, r5
 80026f2:	f7ff ffa5 	bl	8002640 <sbrk_aligned>
 80026f6:	3001      	adds	r0, #1
 80026f8:	d02b      	beq.n	8002752 <_malloc_r+0xd2>
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	442b      	add	r3, r5
 80026fe:	6023      	str	r3, [r4, #0]
 8002700:	e00e      	b.n	8002720 <_malloc_r+0xa0>
 8002702:	6822      	ldr	r2, [r4, #0]
 8002704:	1b52      	subs	r2, r2, r5
 8002706:	d41e      	bmi.n	8002746 <_malloc_r+0xc6>
 8002708:	2a0b      	cmp	r2, #11
 800270a:	d916      	bls.n	800273a <_malloc_r+0xba>
 800270c:	1961      	adds	r1, r4, r5
 800270e:	42a3      	cmp	r3, r4
 8002710:	6025      	str	r5, [r4, #0]
 8002712:	bf18      	it	ne
 8002714:	6059      	strne	r1, [r3, #4]
 8002716:	6863      	ldr	r3, [r4, #4]
 8002718:	bf08      	it	eq
 800271a:	6031      	streq	r1, [r6, #0]
 800271c:	5162      	str	r2, [r4, r5]
 800271e:	604b      	str	r3, [r1, #4]
 8002720:	4638      	mov	r0, r7
 8002722:	f104 060b 	add.w	r6, r4, #11
 8002726:	f000 fd8d 	bl	8003244 <__malloc_unlock>
 800272a:	f026 0607 	bic.w	r6, r6, #7
 800272e:	1d23      	adds	r3, r4, #4
 8002730:	1af2      	subs	r2, r6, r3
 8002732:	d0b6      	beq.n	80026a2 <_malloc_r+0x22>
 8002734:	1b9b      	subs	r3, r3, r6
 8002736:	50a3      	str	r3, [r4, r2]
 8002738:	e7b3      	b.n	80026a2 <_malloc_r+0x22>
 800273a:	6862      	ldr	r2, [r4, #4]
 800273c:	42a3      	cmp	r3, r4
 800273e:	bf0c      	ite	eq
 8002740:	6032      	streq	r2, [r6, #0]
 8002742:	605a      	strne	r2, [r3, #4]
 8002744:	e7ec      	b.n	8002720 <_malloc_r+0xa0>
 8002746:	4623      	mov	r3, r4
 8002748:	6864      	ldr	r4, [r4, #4]
 800274a:	e7b2      	b.n	80026b2 <_malloc_r+0x32>
 800274c:	4634      	mov	r4, r6
 800274e:	6876      	ldr	r6, [r6, #4]
 8002750:	e7b9      	b.n	80026c6 <_malloc_r+0x46>
 8002752:	230c      	movs	r3, #12
 8002754:	4638      	mov	r0, r7
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	f000 fd74 	bl	8003244 <__malloc_unlock>
 800275c:	e7a1      	b.n	80026a2 <_malloc_r+0x22>
 800275e:	6025      	str	r5, [r4, #0]
 8002760:	e7de      	b.n	8002720 <_malloc_r+0xa0>
 8002762:	bf00      	nop
 8002764:	200000e4 	.word	0x200000e4

08002768 <__sfputc_r>:
 8002768:	6893      	ldr	r3, [r2, #8]
 800276a:	b410      	push	{r4}
 800276c:	3b01      	subs	r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	6093      	str	r3, [r2, #8]
 8002772:	da07      	bge.n	8002784 <__sfputc_r+0x1c>
 8002774:	6994      	ldr	r4, [r2, #24]
 8002776:	42a3      	cmp	r3, r4
 8002778:	db01      	blt.n	800277e <__sfputc_r+0x16>
 800277a:	290a      	cmp	r1, #10
 800277c:	d102      	bne.n	8002784 <__sfputc_r+0x1c>
 800277e:	bc10      	pop	{r4}
 8002780:	f000 bb34 	b.w	8002dec <__swbuf_r>
 8002784:	6813      	ldr	r3, [r2, #0]
 8002786:	1c58      	adds	r0, r3, #1
 8002788:	6010      	str	r0, [r2, #0]
 800278a:	7019      	strb	r1, [r3, #0]
 800278c:	4608      	mov	r0, r1
 800278e:	bc10      	pop	{r4}
 8002790:	4770      	bx	lr

08002792 <__sfputs_r>:
 8002792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002794:	4606      	mov	r6, r0
 8002796:	460f      	mov	r7, r1
 8002798:	4614      	mov	r4, r2
 800279a:	18d5      	adds	r5, r2, r3
 800279c:	42ac      	cmp	r4, r5
 800279e:	d101      	bne.n	80027a4 <__sfputs_r+0x12>
 80027a0:	2000      	movs	r0, #0
 80027a2:	e007      	b.n	80027b4 <__sfputs_r+0x22>
 80027a4:	463a      	mov	r2, r7
 80027a6:	4630      	mov	r0, r6
 80027a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027ac:	f7ff ffdc 	bl	8002768 <__sfputc_r>
 80027b0:	1c43      	adds	r3, r0, #1
 80027b2:	d1f3      	bne.n	800279c <__sfputs_r+0xa>
 80027b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080027b8 <_vfiprintf_r>:
 80027b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027bc:	460d      	mov	r5, r1
 80027be:	4614      	mov	r4, r2
 80027c0:	4698      	mov	r8, r3
 80027c2:	4606      	mov	r6, r0
 80027c4:	b09d      	sub	sp, #116	; 0x74
 80027c6:	b118      	cbz	r0, 80027d0 <_vfiprintf_r+0x18>
 80027c8:	6983      	ldr	r3, [r0, #24]
 80027ca:	b90b      	cbnz	r3, 80027d0 <_vfiprintf_r+0x18>
 80027cc:	f7ff fe98 	bl	8002500 <__sinit>
 80027d0:	4b89      	ldr	r3, [pc, #548]	; (80029f8 <_vfiprintf_r+0x240>)
 80027d2:	429d      	cmp	r5, r3
 80027d4:	d11b      	bne.n	800280e <_vfiprintf_r+0x56>
 80027d6:	6875      	ldr	r5, [r6, #4]
 80027d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027da:	07d9      	lsls	r1, r3, #31
 80027dc:	d405      	bmi.n	80027ea <_vfiprintf_r+0x32>
 80027de:	89ab      	ldrh	r3, [r5, #12]
 80027e0:	059a      	lsls	r2, r3, #22
 80027e2:	d402      	bmi.n	80027ea <_vfiprintf_r+0x32>
 80027e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027e6:	f7ff ff29 	bl	800263c <__retarget_lock_acquire_recursive>
 80027ea:	89ab      	ldrh	r3, [r5, #12]
 80027ec:	071b      	lsls	r3, r3, #28
 80027ee:	d501      	bpl.n	80027f4 <_vfiprintf_r+0x3c>
 80027f0:	692b      	ldr	r3, [r5, #16]
 80027f2:	b9eb      	cbnz	r3, 8002830 <_vfiprintf_r+0x78>
 80027f4:	4629      	mov	r1, r5
 80027f6:	4630      	mov	r0, r6
 80027f8:	f000 fb5c 	bl	8002eb4 <__swsetup_r>
 80027fc:	b1c0      	cbz	r0, 8002830 <_vfiprintf_r+0x78>
 80027fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002800:	07dc      	lsls	r4, r3, #31
 8002802:	d50e      	bpl.n	8002822 <_vfiprintf_r+0x6a>
 8002804:	f04f 30ff 	mov.w	r0, #4294967295
 8002808:	b01d      	add	sp, #116	; 0x74
 800280a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800280e:	4b7b      	ldr	r3, [pc, #492]	; (80029fc <_vfiprintf_r+0x244>)
 8002810:	429d      	cmp	r5, r3
 8002812:	d101      	bne.n	8002818 <_vfiprintf_r+0x60>
 8002814:	68b5      	ldr	r5, [r6, #8]
 8002816:	e7df      	b.n	80027d8 <_vfiprintf_r+0x20>
 8002818:	4b79      	ldr	r3, [pc, #484]	; (8002a00 <_vfiprintf_r+0x248>)
 800281a:	429d      	cmp	r5, r3
 800281c:	bf08      	it	eq
 800281e:	68f5      	ldreq	r5, [r6, #12]
 8002820:	e7da      	b.n	80027d8 <_vfiprintf_r+0x20>
 8002822:	89ab      	ldrh	r3, [r5, #12]
 8002824:	0598      	lsls	r0, r3, #22
 8002826:	d4ed      	bmi.n	8002804 <_vfiprintf_r+0x4c>
 8002828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800282a:	f7ff ff08 	bl	800263e <__retarget_lock_release_recursive>
 800282e:	e7e9      	b.n	8002804 <_vfiprintf_r+0x4c>
 8002830:	2300      	movs	r3, #0
 8002832:	9309      	str	r3, [sp, #36]	; 0x24
 8002834:	2320      	movs	r3, #32
 8002836:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800283a:	2330      	movs	r3, #48	; 0x30
 800283c:	f04f 0901 	mov.w	r9, #1
 8002840:	f8cd 800c 	str.w	r8, [sp, #12]
 8002844:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002a04 <_vfiprintf_r+0x24c>
 8002848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800284c:	4623      	mov	r3, r4
 800284e:	469a      	mov	sl, r3
 8002850:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002854:	b10a      	cbz	r2, 800285a <_vfiprintf_r+0xa2>
 8002856:	2a25      	cmp	r2, #37	; 0x25
 8002858:	d1f9      	bne.n	800284e <_vfiprintf_r+0x96>
 800285a:	ebba 0b04 	subs.w	fp, sl, r4
 800285e:	d00b      	beq.n	8002878 <_vfiprintf_r+0xc0>
 8002860:	465b      	mov	r3, fp
 8002862:	4622      	mov	r2, r4
 8002864:	4629      	mov	r1, r5
 8002866:	4630      	mov	r0, r6
 8002868:	f7ff ff93 	bl	8002792 <__sfputs_r>
 800286c:	3001      	adds	r0, #1
 800286e:	f000 80aa 	beq.w	80029c6 <_vfiprintf_r+0x20e>
 8002872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002874:	445a      	add	r2, fp
 8002876:	9209      	str	r2, [sp, #36]	; 0x24
 8002878:	f89a 3000 	ldrb.w	r3, [sl]
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80a2 	beq.w	80029c6 <_vfiprintf_r+0x20e>
 8002882:	2300      	movs	r3, #0
 8002884:	f04f 32ff 	mov.w	r2, #4294967295
 8002888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800288c:	f10a 0a01 	add.w	sl, sl, #1
 8002890:	9304      	str	r3, [sp, #16]
 8002892:	9307      	str	r3, [sp, #28]
 8002894:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002898:	931a      	str	r3, [sp, #104]	; 0x68
 800289a:	4654      	mov	r4, sl
 800289c:	2205      	movs	r2, #5
 800289e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028a2:	4858      	ldr	r0, [pc, #352]	; (8002a04 <_vfiprintf_r+0x24c>)
 80028a4:	f000 fcba 	bl	800321c <memchr>
 80028a8:	9a04      	ldr	r2, [sp, #16]
 80028aa:	b9d8      	cbnz	r0, 80028e4 <_vfiprintf_r+0x12c>
 80028ac:	06d1      	lsls	r1, r2, #27
 80028ae:	bf44      	itt	mi
 80028b0:	2320      	movmi	r3, #32
 80028b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028b6:	0713      	lsls	r3, r2, #28
 80028b8:	bf44      	itt	mi
 80028ba:	232b      	movmi	r3, #43	; 0x2b
 80028bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028c0:	f89a 3000 	ldrb.w	r3, [sl]
 80028c4:	2b2a      	cmp	r3, #42	; 0x2a
 80028c6:	d015      	beq.n	80028f4 <_vfiprintf_r+0x13c>
 80028c8:	4654      	mov	r4, sl
 80028ca:	2000      	movs	r0, #0
 80028cc:	f04f 0c0a 	mov.w	ip, #10
 80028d0:	9a07      	ldr	r2, [sp, #28]
 80028d2:	4621      	mov	r1, r4
 80028d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028d8:	3b30      	subs	r3, #48	; 0x30
 80028da:	2b09      	cmp	r3, #9
 80028dc:	d94e      	bls.n	800297c <_vfiprintf_r+0x1c4>
 80028de:	b1b0      	cbz	r0, 800290e <_vfiprintf_r+0x156>
 80028e0:	9207      	str	r2, [sp, #28]
 80028e2:	e014      	b.n	800290e <_vfiprintf_r+0x156>
 80028e4:	eba0 0308 	sub.w	r3, r0, r8
 80028e8:	fa09 f303 	lsl.w	r3, r9, r3
 80028ec:	4313      	orrs	r3, r2
 80028ee:	46a2      	mov	sl, r4
 80028f0:	9304      	str	r3, [sp, #16]
 80028f2:	e7d2      	b.n	800289a <_vfiprintf_r+0xe2>
 80028f4:	9b03      	ldr	r3, [sp, #12]
 80028f6:	1d19      	adds	r1, r3, #4
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	9103      	str	r1, [sp, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bfbb      	ittet	lt
 8002900:	425b      	neglt	r3, r3
 8002902:	f042 0202 	orrlt.w	r2, r2, #2
 8002906:	9307      	strge	r3, [sp, #28]
 8002908:	9307      	strlt	r3, [sp, #28]
 800290a:	bfb8      	it	lt
 800290c:	9204      	strlt	r2, [sp, #16]
 800290e:	7823      	ldrb	r3, [r4, #0]
 8002910:	2b2e      	cmp	r3, #46	; 0x2e
 8002912:	d10c      	bne.n	800292e <_vfiprintf_r+0x176>
 8002914:	7863      	ldrb	r3, [r4, #1]
 8002916:	2b2a      	cmp	r3, #42	; 0x2a
 8002918:	d135      	bne.n	8002986 <_vfiprintf_r+0x1ce>
 800291a:	9b03      	ldr	r3, [sp, #12]
 800291c:	3402      	adds	r4, #2
 800291e:	1d1a      	adds	r2, r3, #4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	9203      	str	r2, [sp, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	bfb8      	it	lt
 8002928:	f04f 33ff 	movlt.w	r3, #4294967295
 800292c:	9305      	str	r3, [sp, #20]
 800292e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002a08 <_vfiprintf_r+0x250>
 8002932:	2203      	movs	r2, #3
 8002934:	4650      	mov	r0, sl
 8002936:	7821      	ldrb	r1, [r4, #0]
 8002938:	f000 fc70 	bl	800321c <memchr>
 800293c:	b140      	cbz	r0, 8002950 <_vfiprintf_r+0x198>
 800293e:	2340      	movs	r3, #64	; 0x40
 8002940:	eba0 000a 	sub.w	r0, r0, sl
 8002944:	fa03 f000 	lsl.w	r0, r3, r0
 8002948:	9b04      	ldr	r3, [sp, #16]
 800294a:	3401      	adds	r4, #1
 800294c:	4303      	orrs	r3, r0
 800294e:	9304      	str	r3, [sp, #16]
 8002950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002954:	2206      	movs	r2, #6
 8002956:	482d      	ldr	r0, [pc, #180]	; (8002a0c <_vfiprintf_r+0x254>)
 8002958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800295c:	f000 fc5e 	bl	800321c <memchr>
 8002960:	2800      	cmp	r0, #0
 8002962:	d03f      	beq.n	80029e4 <_vfiprintf_r+0x22c>
 8002964:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <_vfiprintf_r+0x258>)
 8002966:	bb1b      	cbnz	r3, 80029b0 <_vfiprintf_r+0x1f8>
 8002968:	9b03      	ldr	r3, [sp, #12]
 800296a:	3307      	adds	r3, #7
 800296c:	f023 0307 	bic.w	r3, r3, #7
 8002970:	3308      	adds	r3, #8
 8002972:	9303      	str	r3, [sp, #12]
 8002974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002976:	443b      	add	r3, r7
 8002978:	9309      	str	r3, [sp, #36]	; 0x24
 800297a:	e767      	b.n	800284c <_vfiprintf_r+0x94>
 800297c:	460c      	mov	r4, r1
 800297e:	2001      	movs	r0, #1
 8002980:	fb0c 3202 	mla	r2, ip, r2, r3
 8002984:	e7a5      	b.n	80028d2 <_vfiprintf_r+0x11a>
 8002986:	2300      	movs	r3, #0
 8002988:	f04f 0c0a 	mov.w	ip, #10
 800298c:	4619      	mov	r1, r3
 800298e:	3401      	adds	r4, #1
 8002990:	9305      	str	r3, [sp, #20]
 8002992:	4620      	mov	r0, r4
 8002994:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002998:	3a30      	subs	r2, #48	; 0x30
 800299a:	2a09      	cmp	r2, #9
 800299c:	d903      	bls.n	80029a6 <_vfiprintf_r+0x1ee>
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0c5      	beq.n	800292e <_vfiprintf_r+0x176>
 80029a2:	9105      	str	r1, [sp, #20]
 80029a4:	e7c3      	b.n	800292e <_vfiprintf_r+0x176>
 80029a6:	4604      	mov	r4, r0
 80029a8:	2301      	movs	r3, #1
 80029aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80029ae:	e7f0      	b.n	8002992 <_vfiprintf_r+0x1da>
 80029b0:	ab03      	add	r3, sp, #12
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	462a      	mov	r2, r5
 80029b6:	4630      	mov	r0, r6
 80029b8:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <_vfiprintf_r+0x25c>)
 80029ba:	a904      	add	r1, sp, #16
 80029bc:	f3af 8000 	nop.w
 80029c0:	4607      	mov	r7, r0
 80029c2:	1c78      	adds	r0, r7, #1
 80029c4:	d1d6      	bne.n	8002974 <_vfiprintf_r+0x1bc>
 80029c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029c8:	07d9      	lsls	r1, r3, #31
 80029ca:	d405      	bmi.n	80029d8 <_vfiprintf_r+0x220>
 80029cc:	89ab      	ldrh	r3, [r5, #12]
 80029ce:	059a      	lsls	r2, r3, #22
 80029d0:	d402      	bmi.n	80029d8 <_vfiprintf_r+0x220>
 80029d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029d4:	f7ff fe33 	bl	800263e <__retarget_lock_release_recursive>
 80029d8:	89ab      	ldrh	r3, [r5, #12]
 80029da:	065b      	lsls	r3, r3, #25
 80029dc:	f53f af12 	bmi.w	8002804 <_vfiprintf_r+0x4c>
 80029e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029e2:	e711      	b.n	8002808 <_vfiprintf_r+0x50>
 80029e4:	ab03      	add	r3, sp, #12
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	462a      	mov	r2, r5
 80029ea:	4630      	mov	r0, r6
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <_vfiprintf_r+0x25c>)
 80029ee:	a904      	add	r1, sp, #16
 80029f0:	f000 f882 	bl	8002af8 <_printf_i>
 80029f4:	e7e4      	b.n	80029c0 <_vfiprintf_r+0x208>
 80029f6:	bf00      	nop
 80029f8:	08003448 	.word	0x08003448
 80029fc:	08003468 	.word	0x08003468
 8002a00:	08003428 	.word	0x08003428
 8002a04:	08003488 	.word	0x08003488
 8002a08:	0800348e 	.word	0x0800348e
 8002a0c:	08003492 	.word	0x08003492
 8002a10:	00000000 	.word	0x00000000
 8002a14:	08002793 	.word	0x08002793

08002a18 <_printf_common>:
 8002a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a1c:	4616      	mov	r6, r2
 8002a1e:	4699      	mov	r9, r3
 8002a20:	688a      	ldr	r2, [r1, #8]
 8002a22:	690b      	ldr	r3, [r1, #16]
 8002a24:	4607      	mov	r7, r0
 8002a26:	4293      	cmp	r3, r2
 8002a28:	bfb8      	it	lt
 8002a2a:	4613      	movlt	r3, r2
 8002a2c:	6033      	str	r3, [r6, #0]
 8002a2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a32:	460c      	mov	r4, r1
 8002a34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a38:	b10a      	cbz	r2, 8002a3e <_printf_common+0x26>
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	6033      	str	r3, [r6, #0]
 8002a3e:	6823      	ldr	r3, [r4, #0]
 8002a40:	0699      	lsls	r1, r3, #26
 8002a42:	bf42      	ittt	mi
 8002a44:	6833      	ldrmi	r3, [r6, #0]
 8002a46:	3302      	addmi	r3, #2
 8002a48:	6033      	strmi	r3, [r6, #0]
 8002a4a:	6825      	ldr	r5, [r4, #0]
 8002a4c:	f015 0506 	ands.w	r5, r5, #6
 8002a50:	d106      	bne.n	8002a60 <_printf_common+0x48>
 8002a52:	f104 0a19 	add.w	sl, r4, #25
 8002a56:	68e3      	ldr	r3, [r4, #12]
 8002a58:	6832      	ldr	r2, [r6, #0]
 8002a5a:	1a9b      	subs	r3, r3, r2
 8002a5c:	42ab      	cmp	r3, r5
 8002a5e:	dc28      	bgt.n	8002ab2 <_printf_common+0x9a>
 8002a60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a64:	1e13      	subs	r3, r2, #0
 8002a66:	6822      	ldr	r2, [r4, #0]
 8002a68:	bf18      	it	ne
 8002a6a:	2301      	movne	r3, #1
 8002a6c:	0692      	lsls	r2, r2, #26
 8002a6e:	d42d      	bmi.n	8002acc <_printf_common+0xb4>
 8002a70:	4649      	mov	r1, r9
 8002a72:	4638      	mov	r0, r7
 8002a74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a78:	47c0      	blx	r8
 8002a7a:	3001      	adds	r0, #1
 8002a7c:	d020      	beq.n	8002ac0 <_printf_common+0xa8>
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	68e5      	ldr	r5, [r4, #12]
 8002a82:	f003 0306 	and.w	r3, r3, #6
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	bf18      	it	ne
 8002a8a:	2500      	movne	r5, #0
 8002a8c:	6832      	ldr	r2, [r6, #0]
 8002a8e:	f04f 0600 	mov.w	r6, #0
 8002a92:	68a3      	ldr	r3, [r4, #8]
 8002a94:	bf08      	it	eq
 8002a96:	1aad      	subeq	r5, r5, r2
 8002a98:	6922      	ldr	r2, [r4, #16]
 8002a9a:	bf08      	it	eq
 8002a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	bfc4      	itt	gt
 8002aa4:	1a9b      	subgt	r3, r3, r2
 8002aa6:	18ed      	addgt	r5, r5, r3
 8002aa8:	341a      	adds	r4, #26
 8002aaa:	42b5      	cmp	r5, r6
 8002aac:	d11a      	bne.n	8002ae4 <_printf_common+0xcc>
 8002aae:	2000      	movs	r0, #0
 8002ab0:	e008      	b.n	8002ac4 <_printf_common+0xac>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	4649      	mov	r1, r9
 8002ab8:	4638      	mov	r0, r7
 8002aba:	47c0      	blx	r8
 8002abc:	3001      	adds	r0, #1
 8002abe:	d103      	bne.n	8002ac8 <_printf_common+0xb0>
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ac8:	3501      	adds	r5, #1
 8002aca:	e7c4      	b.n	8002a56 <_printf_common+0x3e>
 8002acc:	2030      	movs	r0, #48	; 0x30
 8002ace:	18e1      	adds	r1, r4, r3
 8002ad0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ada:	4422      	add	r2, r4
 8002adc:	3302      	adds	r3, #2
 8002ade:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ae2:	e7c5      	b.n	8002a70 <_printf_common+0x58>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	4622      	mov	r2, r4
 8002ae8:	4649      	mov	r1, r9
 8002aea:	4638      	mov	r0, r7
 8002aec:	47c0      	blx	r8
 8002aee:	3001      	adds	r0, #1
 8002af0:	d0e6      	beq.n	8002ac0 <_printf_common+0xa8>
 8002af2:	3601      	adds	r6, #1
 8002af4:	e7d9      	b.n	8002aaa <_printf_common+0x92>
	...

08002af8 <_printf_i>:
 8002af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002afc:	7e0f      	ldrb	r7, [r1, #24]
 8002afe:	4691      	mov	r9, r2
 8002b00:	2f78      	cmp	r7, #120	; 0x78
 8002b02:	4680      	mov	r8, r0
 8002b04:	460c      	mov	r4, r1
 8002b06:	469a      	mov	sl, r3
 8002b08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b0e:	d807      	bhi.n	8002b20 <_printf_i+0x28>
 8002b10:	2f62      	cmp	r7, #98	; 0x62
 8002b12:	d80a      	bhi.n	8002b2a <_printf_i+0x32>
 8002b14:	2f00      	cmp	r7, #0
 8002b16:	f000 80d9 	beq.w	8002ccc <_printf_i+0x1d4>
 8002b1a:	2f58      	cmp	r7, #88	; 0x58
 8002b1c:	f000 80a4 	beq.w	8002c68 <_printf_i+0x170>
 8002b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b28:	e03a      	b.n	8002ba0 <_printf_i+0xa8>
 8002b2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b2e:	2b15      	cmp	r3, #21
 8002b30:	d8f6      	bhi.n	8002b20 <_printf_i+0x28>
 8002b32:	a101      	add	r1, pc, #4	; (adr r1, 8002b38 <_printf_i+0x40>)
 8002b34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b38:	08002b91 	.word	0x08002b91
 8002b3c:	08002ba5 	.word	0x08002ba5
 8002b40:	08002b21 	.word	0x08002b21
 8002b44:	08002b21 	.word	0x08002b21
 8002b48:	08002b21 	.word	0x08002b21
 8002b4c:	08002b21 	.word	0x08002b21
 8002b50:	08002ba5 	.word	0x08002ba5
 8002b54:	08002b21 	.word	0x08002b21
 8002b58:	08002b21 	.word	0x08002b21
 8002b5c:	08002b21 	.word	0x08002b21
 8002b60:	08002b21 	.word	0x08002b21
 8002b64:	08002cb3 	.word	0x08002cb3
 8002b68:	08002bd5 	.word	0x08002bd5
 8002b6c:	08002c95 	.word	0x08002c95
 8002b70:	08002b21 	.word	0x08002b21
 8002b74:	08002b21 	.word	0x08002b21
 8002b78:	08002cd5 	.word	0x08002cd5
 8002b7c:	08002b21 	.word	0x08002b21
 8002b80:	08002bd5 	.word	0x08002bd5
 8002b84:	08002b21 	.word	0x08002b21
 8002b88:	08002b21 	.word	0x08002b21
 8002b8c:	08002c9d 	.word	0x08002c9d
 8002b90:	682b      	ldr	r3, [r5, #0]
 8002b92:	1d1a      	adds	r2, r3, #4
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	602a      	str	r2, [r5, #0]
 8002b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0a4      	b.n	8002cee <_printf_i+0x1f6>
 8002ba4:	6820      	ldr	r0, [r4, #0]
 8002ba6:	6829      	ldr	r1, [r5, #0]
 8002ba8:	0606      	lsls	r6, r0, #24
 8002baa:	f101 0304 	add.w	r3, r1, #4
 8002bae:	d50a      	bpl.n	8002bc6 <_printf_i+0xce>
 8002bb0:	680e      	ldr	r6, [r1, #0]
 8002bb2:	602b      	str	r3, [r5, #0]
 8002bb4:	2e00      	cmp	r6, #0
 8002bb6:	da03      	bge.n	8002bc0 <_printf_i+0xc8>
 8002bb8:	232d      	movs	r3, #45	; 0x2d
 8002bba:	4276      	negs	r6, r6
 8002bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bc0:	230a      	movs	r3, #10
 8002bc2:	485e      	ldr	r0, [pc, #376]	; (8002d3c <_printf_i+0x244>)
 8002bc4:	e019      	b.n	8002bfa <_printf_i+0x102>
 8002bc6:	680e      	ldr	r6, [r1, #0]
 8002bc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bcc:	602b      	str	r3, [r5, #0]
 8002bce:	bf18      	it	ne
 8002bd0:	b236      	sxthne	r6, r6
 8002bd2:	e7ef      	b.n	8002bb4 <_printf_i+0xbc>
 8002bd4:	682b      	ldr	r3, [r5, #0]
 8002bd6:	6820      	ldr	r0, [r4, #0]
 8002bd8:	1d19      	adds	r1, r3, #4
 8002bda:	6029      	str	r1, [r5, #0]
 8002bdc:	0601      	lsls	r1, r0, #24
 8002bde:	d501      	bpl.n	8002be4 <_printf_i+0xec>
 8002be0:	681e      	ldr	r6, [r3, #0]
 8002be2:	e002      	b.n	8002bea <_printf_i+0xf2>
 8002be4:	0646      	lsls	r6, r0, #25
 8002be6:	d5fb      	bpl.n	8002be0 <_printf_i+0xe8>
 8002be8:	881e      	ldrh	r6, [r3, #0]
 8002bea:	2f6f      	cmp	r7, #111	; 0x6f
 8002bec:	bf0c      	ite	eq
 8002bee:	2308      	moveq	r3, #8
 8002bf0:	230a      	movne	r3, #10
 8002bf2:	4852      	ldr	r0, [pc, #328]	; (8002d3c <_printf_i+0x244>)
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bfa:	6865      	ldr	r5, [r4, #4]
 8002bfc:	2d00      	cmp	r5, #0
 8002bfe:	bfa8      	it	ge
 8002c00:	6821      	ldrge	r1, [r4, #0]
 8002c02:	60a5      	str	r5, [r4, #8]
 8002c04:	bfa4      	itt	ge
 8002c06:	f021 0104 	bicge.w	r1, r1, #4
 8002c0a:	6021      	strge	r1, [r4, #0]
 8002c0c:	b90e      	cbnz	r6, 8002c12 <_printf_i+0x11a>
 8002c0e:	2d00      	cmp	r5, #0
 8002c10:	d04d      	beq.n	8002cae <_printf_i+0x1b6>
 8002c12:	4615      	mov	r5, r2
 8002c14:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c18:	fb03 6711 	mls	r7, r3, r1, r6
 8002c1c:	5dc7      	ldrb	r7, [r0, r7]
 8002c1e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c22:	4637      	mov	r7, r6
 8002c24:	42bb      	cmp	r3, r7
 8002c26:	460e      	mov	r6, r1
 8002c28:	d9f4      	bls.n	8002c14 <_printf_i+0x11c>
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d10b      	bne.n	8002c46 <_printf_i+0x14e>
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	07de      	lsls	r6, r3, #31
 8002c32:	d508      	bpl.n	8002c46 <_printf_i+0x14e>
 8002c34:	6923      	ldr	r3, [r4, #16]
 8002c36:	6861      	ldr	r1, [r4, #4]
 8002c38:	4299      	cmp	r1, r3
 8002c3a:	bfde      	ittt	le
 8002c3c:	2330      	movle	r3, #48	; 0x30
 8002c3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c46:	1b52      	subs	r2, r2, r5
 8002c48:	6122      	str	r2, [r4, #16]
 8002c4a:	464b      	mov	r3, r9
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	4640      	mov	r0, r8
 8002c50:	f8cd a000 	str.w	sl, [sp]
 8002c54:	aa03      	add	r2, sp, #12
 8002c56:	f7ff fedf 	bl	8002a18 <_printf_common>
 8002c5a:	3001      	adds	r0, #1
 8002c5c:	d14c      	bne.n	8002cf8 <_printf_i+0x200>
 8002c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c62:	b004      	add	sp, #16
 8002c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c68:	4834      	ldr	r0, [pc, #208]	; (8002d3c <_printf_i+0x244>)
 8002c6a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002c6e:	6829      	ldr	r1, [r5, #0]
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c76:	6029      	str	r1, [r5, #0]
 8002c78:	061d      	lsls	r5, r3, #24
 8002c7a:	d514      	bpl.n	8002ca6 <_printf_i+0x1ae>
 8002c7c:	07df      	lsls	r7, r3, #31
 8002c7e:	bf44      	itt	mi
 8002c80:	f043 0320 	orrmi.w	r3, r3, #32
 8002c84:	6023      	strmi	r3, [r4, #0]
 8002c86:	b91e      	cbnz	r6, 8002c90 <_printf_i+0x198>
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	f023 0320 	bic.w	r3, r3, #32
 8002c8e:	6023      	str	r3, [r4, #0]
 8002c90:	2310      	movs	r3, #16
 8002c92:	e7af      	b.n	8002bf4 <_printf_i+0xfc>
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	f043 0320 	orr.w	r3, r3, #32
 8002c9a:	6023      	str	r3, [r4, #0]
 8002c9c:	2378      	movs	r3, #120	; 0x78
 8002c9e:	4828      	ldr	r0, [pc, #160]	; (8002d40 <_printf_i+0x248>)
 8002ca0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ca4:	e7e3      	b.n	8002c6e <_printf_i+0x176>
 8002ca6:	0659      	lsls	r1, r3, #25
 8002ca8:	bf48      	it	mi
 8002caa:	b2b6      	uxthmi	r6, r6
 8002cac:	e7e6      	b.n	8002c7c <_printf_i+0x184>
 8002cae:	4615      	mov	r5, r2
 8002cb0:	e7bb      	b.n	8002c2a <_printf_i+0x132>
 8002cb2:	682b      	ldr	r3, [r5, #0]
 8002cb4:	6826      	ldr	r6, [r4, #0]
 8002cb6:	1d18      	adds	r0, r3, #4
 8002cb8:	6961      	ldr	r1, [r4, #20]
 8002cba:	6028      	str	r0, [r5, #0]
 8002cbc:	0635      	lsls	r5, r6, #24
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	d501      	bpl.n	8002cc6 <_printf_i+0x1ce>
 8002cc2:	6019      	str	r1, [r3, #0]
 8002cc4:	e002      	b.n	8002ccc <_printf_i+0x1d4>
 8002cc6:	0670      	lsls	r0, r6, #25
 8002cc8:	d5fb      	bpl.n	8002cc2 <_printf_i+0x1ca>
 8002cca:	8019      	strh	r1, [r3, #0]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	4615      	mov	r5, r2
 8002cd0:	6123      	str	r3, [r4, #16]
 8002cd2:	e7ba      	b.n	8002c4a <_printf_i+0x152>
 8002cd4:	682b      	ldr	r3, [r5, #0]
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	1d1a      	adds	r2, r3, #4
 8002cda:	602a      	str	r2, [r5, #0]
 8002cdc:	681d      	ldr	r5, [r3, #0]
 8002cde:	6862      	ldr	r2, [r4, #4]
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	f000 fa9b 	bl	800321c <memchr>
 8002ce6:	b108      	cbz	r0, 8002cec <_printf_i+0x1f4>
 8002ce8:	1b40      	subs	r0, r0, r5
 8002cea:	6060      	str	r0, [r4, #4]
 8002cec:	6863      	ldr	r3, [r4, #4]
 8002cee:	6123      	str	r3, [r4, #16]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cf6:	e7a8      	b.n	8002c4a <_printf_i+0x152>
 8002cf8:	462a      	mov	r2, r5
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	4640      	mov	r0, r8
 8002cfe:	6923      	ldr	r3, [r4, #16]
 8002d00:	47d0      	blx	sl
 8002d02:	3001      	adds	r0, #1
 8002d04:	d0ab      	beq.n	8002c5e <_printf_i+0x166>
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	079b      	lsls	r3, r3, #30
 8002d0a:	d413      	bmi.n	8002d34 <_printf_i+0x23c>
 8002d0c:	68e0      	ldr	r0, [r4, #12]
 8002d0e:	9b03      	ldr	r3, [sp, #12]
 8002d10:	4298      	cmp	r0, r3
 8002d12:	bfb8      	it	lt
 8002d14:	4618      	movlt	r0, r3
 8002d16:	e7a4      	b.n	8002c62 <_printf_i+0x16a>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	4632      	mov	r2, r6
 8002d1c:	4649      	mov	r1, r9
 8002d1e:	4640      	mov	r0, r8
 8002d20:	47d0      	blx	sl
 8002d22:	3001      	adds	r0, #1
 8002d24:	d09b      	beq.n	8002c5e <_printf_i+0x166>
 8002d26:	3501      	adds	r5, #1
 8002d28:	68e3      	ldr	r3, [r4, #12]
 8002d2a:	9903      	ldr	r1, [sp, #12]
 8002d2c:	1a5b      	subs	r3, r3, r1
 8002d2e:	42ab      	cmp	r3, r5
 8002d30:	dcf2      	bgt.n	8002d18 <_printf_i+0x220>
 8002d32:	e7eb      	b.n	8002d0c <_printf_i+0x214>
 8002d34:	2500      	movs	r5, #0
 8002d36:	f104 0619 	add.w	r6, r4, #25
 8002d3a:	e7f5      	b.n	8002d28 <_printf_i+0x230>
 8002d3c:	08003499 	.word	0x08003499
 8002d40:	080034aa 	.word	0x080034aa

08002d44 <_sbrk_r>:
 8002d44:	b538      	push	{r3, r4, r5, lr}
 8002d46:	2300      	movs	r3, #0
 8002d48:	4d05      	ldr	r5, [pc, #20]	; (8002d60 <_sbrk_r+0x1c>)
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	602b      	str	r3, [r5, #0]
 8002d50:	f7fd fbfa 	bl	8000548 <_sbrk>
 8002d54:	1c43      	adds	r3, r0, #1
 8002d56:	d102      	bne.n	8002d5e <_sbrk_r+0x1a>
 8002d58:	682b      	ldr	r3, [r5, #0]
 8002d5a:	b103      	cbz	r3, 8002d5e <_sbrk_r+0x1a>
 8002d5c:	6023      	str	r3, [r4, #0]
 8002d5e:	bd38      	pop	{r3, r4, r5, pc}
 8002d60:	200000ec 	.word	0x200000ec

08002d64 <__sread>:
 8002d64:	b510      	push	{r4, lr}
 8002d66:	460c      	mov	r4, r1
 8002d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d6c:	f000 fab8 	bl	80032e0 <_read_r>
 8002d70:	2800      	cmp	r0, #0
 8002d72:	bfab      	itete	ge
 8002d74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d76:	89a3      	ldrhlt	r3, [r4, #12]
 8002d78:	181b      	addge	r3, r3, r0
 8002d7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d7e:	bfac      	ite	ge
 8002d80:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d82:	81a3      	strhlt	r3, [r4, #12]
 8002d84:	bd10      	pop	{r4, pc}

08002d86 <__swrite>:
 8002d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d8a:	461f      	mov	r7, r3
 8002d8c:	898b      	ldrh	r3, [r1, #12]
 8002d8e:	4605      	mov	r5, r0
 8002d90:	05db      	lsls	r3, r3, #23
 8002d92:	460c      	mov	r4, r1
 8002d94:	4616      	mov	r6, r2
 8002d96:	d505      	bpl.n	8002da4 <__swrite+0x1e>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002da0:	f000 f9c4 	bl	800312c <_lseek_r>
 8002da4:	89a3      	ldrh	r3, [r4, #12]
 8002da6:	4632      	mov	r2, r6
 8002da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dac:	81a3      	strh	r3, [r4, #12]
 8002dae:	4628      	mov	r0, r5
 8002db0:	463b      	mov	r3, r7
 8002db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dba:	f000 b869 	b.w	8002e90 <_write_r>

08002dbe <__sseek>:
 8002dbe:	b510      	push	{r4, lr}
 8002dc0:	460c      	mov	r4, r1
 8002dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dc6:	f000 f9b1 	bl	800312c <_lseek_r>
 8002dca:	1c43      	adds	r3, r0, #1
 8002dcc:	89a3      	ldrh	r3, [r4, #12]
 8002dce:	bf15      	itete	ne
 8002dd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002dd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002dd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002dda:	81a3      	strheq	r3, [r4, #12]
 8002ddc:	bf18      	it	ne
 8002dde:	81a3      	strhne	r3, [r4, #12]
 8002de0:	bd10      	pop	{r4, pc}

08002de2 <__sclose>:
 8002de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002de6:	f000 b8d3 	b.w	8002f90 <_close_r>
	...

08002dec <__swbuf_r>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	460e      	mov	r6, r1
 8002df0:	4614      	mov	r4, r2
 8002df2:	4605      	mov	r5, r0
 8002df4:	b118      	cbz	r0, 8002dfe <__swbuf_r+0x12>
 8002df6:	6983      	ldr	r3, [r0, #24]
 8002df8:	b90b      	cbnz	r3, 8002dfe <__swbuf_r+0x12>
 8002dfa:	f7ff fb81 	bl	8002500 <__sinit>
 8002dfe:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <__swbuf_r+0x98>)
 8002e00:	429c      	cmp	r4, r3
 8002e02:	d12b      	bne.n	8002e5c <__swbuf_r+0x70>
 8002e04:	686c      	ldr	r4, [r5, #4]
 8002e06:	69a3      	ldr	r3, [r4, #24]
 8002e08:	60a3      	str	r3, [r4, #8]
 8002e0a:	89a3      	ldrh	r3, [r4, #12]
 8002e0c:	071a      	lsls	r2, r3, #28
 8002e0e:	d52f      	bpl.n	8002e70 <__swbuf_r+0x84>
 8002e10:	6923      	ldr	r3, [r4, #16]
 8002e12:	b36b      	cbz	r3, 8002e70 <__swbuf_r+0x84>
 8002e14:	6923      	ldr	r3, [r4, #16]
 8002e16:	6820      	ldr	r0, [r4, #0]
 8002e18:	b2f6      	uxtb	r6, r6
 8002e1a:	1ac0      	subs	r0, r0, r3
 8002e1c:	6963      	ldr	r3, [r4, #20]
 8002e1e:	4637      	mov	r7, r6
 8002e20:	4283      	cmp	r3, r0
 8002e22:	dc04      	bgt.n	8002e2e <__swbuf_r+0x42>
 8002e24:	4621      	mov	r1, r4
 8002e26:	4628      	mov	r0, r5
 8002e28:	f000 f944 	bl	80030b4 <_fflush_r>
 8002e2c:	bb30      	cbnz	r0, 8002e7c <__swbuf_r+0x90>
 8002e2e:	68a3      	ldr	r3, [r4, #8]
 8002e30:	3001      	adds	r0, #1
 8002e32:	3b01      	subs	r3, #1
 8002e34:	60a3      	str	r3, [r4, #8]
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	6022      	str	r2, [r4, #0]
 8002e3c:	701e      	strb	r6, [r3, #0]
 8002e3e:	6963      	ldr	r3, [r4, #20]
 8002e40:	4283      	cmp	r3, r0
 8002e42:	d004      	beq.n	8002e4e <__swbuf_r+0x62>
 8002e44:	89a3      	ldrh	r3, [r4, #12]
 8002e46:	07db      	lsls	r3, r3, #31
 8002e48:	d506      	bpl.n	8002e58 <__swbuf_r+0x6c>
 8002e4a:	2e0a      	cmp	r6, #10
 8002e4c:	d104      	bne.n	8002e58 <__swbuf_r+0x6c>
 8002e4e:	4621      	mov	r1, r4
 8002e50:	4628      	mov	r0, r5
 8002e52:	f000 f92f 	bl	80030b4 <_fflush_r>
 8002e56:	b988      	cbnz	r0, 8002e7c <__swbuf_r+0x90>
 8002e58:	4638      	mov	r0, r7
 8002e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <__swbuf_r+0x9c>)
 8002e5e:	429c      	cmp	r4, r3
 8002e60:	d101      	bne.n	8002e66 <__swbuf_r+0x7a>
 8002e62:	68ac      	ldr	r4, [r5, #8]
 8002e64:	e7cf      	b.n	8002e06 <__swbuf_r+0x1a>
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <__swbuf_r+0xa0>)
 8002e68:	429c      	cmp	r4, r3
 8002e6a:	bf08      	it	eq
 8002e6c:	68ec      	ldreq	r4, [r5, #12]
 8002e6e:	e7ca      	b.n	8002e06 <__swbuf_r+0x1a>
 8002e70:	4621      	mov	r1, r4
 8002e72:	4628      	mov	r0, r5
 8002e74:	f000 f81e 	bl	8002eb4 <__swsetup_r>
 8002e78:	2800      	cmp	r0, #0
 8002e7a:	d0cb      	beq.n	8002e14 <__swbuf_r+0x28>
 8002e7c:	f04f 37ff 	mov.w	r7, #4294967295
 8002e80:	e7ea      	b.n	8002e58 <__swbuf_r+0x6c>
 8002e82:	bf00      	nop
 8002e84:	08003448 	.word	0x08003448
 8002e88:	08003468 	.word	0x08003468
 8002e8c:	08003428 	.word	0x08003428

08002e90 <_write_r>:
 8002e90:	b538      	push	{r3, r4, r5, lr}
 8002e92:	4604      	mov	r4, r0
 8002e94:	4608      	mov	r0, r1
 8002e96:	4611      	mov	r1, r2
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4d05      	ldr	r5, [pc, #20]	; (8002eb0 <_write_r+0x20>)
 8002e9c:	602a      	str	r2, [r5, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f7fd f9c2 	bl	8000228 <_write>
 8002ea4:	1c43      	adds	r3, r0, #1
 8002ea6:	d102      	bne.n	8002eae <_write_r+0x1e>
 8002ea8:	682b      	ldr	r3, [r5, #0]
 8002eaa:	b103      	cbz	r3, 8002eae <_write_r+0x1e>
 8002eac:	6023      	str	r3, [r4, #0]
 8002eae:	bd38      	pop	{r3, r4, r5, pc}
 8002eb0:	200000ec 	.word	0x200000ec

08002eb4 <__swsetup_r>:
 8002eb4:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <__swsetup_r+0xcc>)
 8002eb6:	b570      	push	{r4, r5, r6, lr}
 8002eb8:	681d      	ldr	r5, [r3, #0]
 8002eba:	4606      	mov	r6, r0
 8002ebc:	460c      	mov	r4, r1
 8002ebe:	b125      	cbz	r5, 8002eca <__swsetup_r+0x16>
 8002ec0:	69ab      	ldr	r3, [r5, #24]
 8002ec2:	b913      	cbnz	r3, 8002eca <__swsetup_r+0x16>
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	f7ff fb1b 	bl	8002500 <__sinit>
 8002eca:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <__swsetup_r+0xd0>)
 8002ecc:	429c      	cmp	r4, r3
 8002ece:	d10f      	bne.n	8002ef0 <__swsetup_r+0x3c>
 8002ed0:	686c      	ldr	r4, [r5, #4]
 8002ed2:	89a3      	ldrh	r3, [r4, #12]
 8002ed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ed8:	0719      	lsls	r1, r3, #28
 8002eda:	d42c      	bmi.n	8002f36 <__swsetup_r+0x82>
 8002edc:	06dd      	lsls	r5, r3, #27
 8002ede:	d411      	bmi.n	8002f04 <__swsetup_r+0x50>
 8002ee0:	2309      	movs	r3, #9
 8002ee2:	6033      	str	r3, [r6, #0]
 8002ee4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eec:	81a3      	strh	r3, [r4, #12]
 8002eee:	e03e      	b.n	8002f6e <__swsetup_r+0xba>
 8002ef0:	4b25      	ldr	r3, [pc, #148]	; (8002f88 <__swsetup_r+0xd4>)
 8002ef2:	429c      	cmp	r4, r3
 8002ef4:	d101      	bne.n	8002efa <__swsetup_r+0x46>
 8002ef6:	68ac      	ldr	r4, [r5, #8]
 8002ef8:	e7eb      	b.n	8002ed2 <__swsetup_r+0x1e>
 8002efa:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <__swsetup_r+0xd8>)
 8002efc:	429c      	cmp	r4, r3
 8002efe:	bf08      	it	eq
 8002f00:	68ec      	ldreq	r4, [r5, #12]
 8002f02:	e7e6      	b.n	8002ed2 <__swsetup_r+0x1e>
 8002f04:	0758      	lsls	r0, r3, #29
 8002f06:	d512      	bpl.n	8002f2e <__swsetup_r+0x7a>
 8002f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f0a:	b141      	cbz	r1, 8002f1e <__swsetup_r+0x6a>
 8002f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f10:	4299      	cmp	r1, r3
 8002f12:	d002      	beq.n	8002f1a <__swsetup_r+0x66>
 8002f14:	4630      	mov	r0, r6
 8002f16:	f000 f99b 	bl	8003250 <_free_r>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	6363      	str	r3, [r4, #52]	; 0x34
 8002f1e:	89a3      	ldrh	r3, [r4, #12]
 8002f20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f24:	81a3      	strh	r3, [r4, #12]
 8002f26:	2300      	movs	r3, #0
 8002f28:	6063      	str	r3, [r4, #4]
 8002f2a:	6923      	ldr	r3, [r4, #16]
 8002f2c:	6023      	str	r3, [r4, #0]
 8002f2e:	89a3      	ldrh	r3, [r4, #12]
 8002f30:	f043 0308 	orr.w	r3, r3, #8
 8002f34:	81a3      	strh	r3, [r4, #12]
 8002f36:	6923      	ldr	r3, [r4, #16]
 8002f38:	b94b      	cbnz	r3, 8002f4e <__swsetup_r+0x9a>
 8002f3a:	89a3      	ldrh	r3, [r4, #12]
 8002f3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f44:	d003      	beq.n	8002f4e <__swsetup_r+0x9a>
 8002f46:	4621      	mov	r1, r4
 8002f48:	4630      	mov	r0, r6
 8002f4a:	f000 f927 	bl	800319c <__smakebuf_r>
 8002f4e:	89a0      	ldrh	r0, [r4, #12]
 8002f50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f54:	f010 0301 	ands.w	r3, r0, #1
 8002f58:	d00a      	beq.n	8002f70 <__swsetup_r+0xbc>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60a3      	str	r3, [r4, #8]
 8002f5e:	6963      	ldr	r3, [r4, #20]
 8002f60:	425b      	negs	r3, r3
 8002f62:	61a3      	str	r3, [r4, #24]
 8002f64:	6923      	ldr	r3, [r4, #16]
 8002f66:	b943      	cbnz	r3, 8002f7a <__swsetup_r+0xc6>
 8002f68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f6c:	d1ba      	bne.n	8002ee4 <__swsetup_r+0x30>
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
 8002f70:	0781      	lsls	r1, r0, #30
 8002f72:	bf58      	it	pl
 8002f74:	6963      	ldrpl	r3, [r4, #20]
 8002f76:	60a3      	str	r3, [r4, #8]
 8002f78:	e7f4      	b.n	8002f64 <__swsetup_r+0xb0>
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	e7f7      	b.n	8002f6e <__swsetup_r+0xba>
 8002f7e:	bf00      	nop
 8002f80:	2000000c 	.word	0x2000000c
 8002f84:	08003448 	.word	0x08003448
 8002f88:	08003468 	.word	0x08003468
 8002f8c:	08003428 	.word	0x08003428

08002f90 <_close_r>:
 8002f90:	b538      	push	{r3, r4, r5, lr}
 8002f92:	2300      	movs	r3, #0
 8002f94:	4d05      	ldr	r5, [pc, #20]	; (8002fac <_close_r+0x1c>)
 8002f96:	4604      	mov	r4, r0
 8002f98:	4608      	mov	r0, r1
 8002f9a:	602b      	str	r3, [r5, #0]
 8002f9c:	f7fd faa3 	bl	80004e6 <_close>
 8002fa0:	1c43      	adds	r3, r0, #1
 8002fa2:	d102      	bne.n	8002faa <_close_r+0x1a>
 8002fa4:	682b      	ldr	r3, [r5, #0]
 8002fa6:	b103      	cbz	r3, 8002faa <_close_r+0x1a>
 8002fa8:	6023      	str	r3, [r4, #0]
 8002faa:	bd38      	pop	{r3, r4, r5, pc}
 8002fac:	200000ec 	.word	0x200000ec

08002fb0 <__sflush_r>:
 8002fb0:	898a      	ldrh	r2, [r1, #12]
 8002fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb4:	4605      	mov	r5, r0
 8002fb6:	0710      	lsls	r0, r2, #28
 8002fb8:	460c      	mov	r4, r1
 8002fba:	d457      	bmi.n	800306c <__sflush_r+0xbc>
 8002fbc:	684b      	ldr	r3, [r1, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	dc04      	bgt.n	8002fcc <__sflush_r+0x1c>
 8002fc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	dc01      	bgt.n	8002fcc <__sflush_r+0x1c>
 8002fc8:	2000      	movs	r0, #0
 8002fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fce:	2e00      	cmp	r6, #0
 8002fd0:	d0fa      	beq.n	8002fc8 <__sflush_r+0x18>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002fd8:	682f      	ldr	r7, [r5, #0]
 8002fda:	602b      	str	r3, [r5, #0]
 8002fdc:	d032      	beq.n	8003044 <__sflush_r+0x94>
 8002fde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fe0:	89a3      	ldrh	r3, [r4, #12]
 8002fe2:	075a      	lsls	r2, r3, #29
 8002fe4:	d505      	bpl.n	8002ff2 <__sflush_r+0x42>
 8002fe6:	6863      	ldr	r3, [r4, #4]
 8002fe8:	1ac0      	subs	r0, r0, r3
 8002fea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fec:	b10b      	cbz	r3, 8002ff2 <__sflush_r+0x42>
 8002fee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ff0:	1ac0      	subs	r0, r0, r3
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	6a21      	ldr	r1, [r4, #32]
 8002ffc:	47b0      	blx	r6
 8002ffe:	1c43      	adds	r3, r0, #1
 8003000:	89a3      	ldrh	r3, [r4, #12]
 8003002:	d106      	bne.n	8003012 <__sflush_r+0x62>
 8003004:	6829      	ldr	r1, [r5, #0]
 8003006:	291d      	cmp	r1, #29
 8003008:	d82c      	bhi.n	8003064 <__sflush_r+0xb4>
 800300a:	4a29      	ldr	r2, [pc, #164]	; (80030b0 <__sflush_r+0x100>)
 800300c:	40ca      	lsrs	r2, r1
 800300e:	07d6      	lsls	r6, r2, #31
 8003010:	d528      	bpl.n	8003064 <__sflush_r+0xb4>
 8003012:	2200      	movs	r2, #0
 8003014:	6062      	str	r2, [r4, #4]
 8003016:	6922      	ldr	r2, [r4, #16]
 8003018:	04d9      	lsls	r1, r3, #19
 800301a:	6022      	str	r2, [r4, #0]
 800301c:	d504      	bpl.n	8003028 <__sflush_r+0x78>
 800301e:	1c42      	adds	r2, r0, #1
 8003020:	d101      	bne.n	8003026 <__sflush_r+0x76>
 8003022:	682b      	ldr	r3, [r5, #0]
 8003024:	b903      	cbnz	r3, 8003028 <__sflush_r+0x78>
 8003026:	6560      	str	r0, [r4, #84]	; 0x54
 8003028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800302a:	602f      	str	r7, [r5, #0]
 800302c:	2900      	cmp	r1, #0
 800302e:	d0cb      	beq.n	8002fc8 <__sflush_r+0x18>
 8003030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003034:	4299      	cmp	r1, r3
 8003036:	d002      	beq.n	800303e <__sflush_r+0x8e>
 8003038:	4628      	mov	r0, r5
 800303a:	f000 f909 	bl	8003250 <_free_r>
 800303e:	2000      	movs	r0, #0
 8003040:	6360      	str	r0, [r4, #52]	; 0x34
 8003042:	e7c2      	b.n	8002fca <__sflush_r+0x1a>
 8003044:	6a21      	ldr	r1, [r4, #32]
 8003046:	2301      	movs	r3, #1
 8003048:	4628      	mov	r0, r5
 800304a:	47b0      	blx	r6
 800304c:	1c41      	adds	r1, r0, #1
 800304e:	d1c7      	bne.n	8002fe0 <__sflush_r+0x30>
 8003050:	682b      	ldr	r3, [r5, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0c4      	beq.n	8002fe0 <__sflush_r+0x30>
 8003056:	2b1d      	cmp	r3, #29
 8003058:	d001      	beq.n	800305e <__sflush_r+0xae>
 800305a:	2b16      	cmp	r3, #22
 800305c:	d101      	bne.n	8003062 <__sflush_r+0xb2>
 800305e:	602f      	str	r7, [r5, #0]
 8003060:	e7b2      	b.n	8002fc8 <__sflush_r+0x18>
 8003062:	89a3      	ldrh	r3, [r4, #12]
 8003064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003068:	81a3      	strh	r3, [r4, #12]
 800306a:	e7ae      	b.n	8002fca <__sflush_r+0x1a>
 800306c:	690f      	ldr	r7, [r1, #16]
 800306e:	2f00      	cmp	r7, #0
 8003070:	d0aa      	beq.n	8002fc8 <__sflush_r+0x18>
 8003072:	0793      	lsls	r3, r2, #30
 8003074:	bf18      	it	ne
 8003076:	2300      	movne	r3, #0
 8003078:	680e      	ldr	r6, [r1, #0]
 800307a:	bf08      	it	eq
 800307c:	694b      	ldreq	r3, [r1, #20]
 800307e:	1bf6      	subs	r6, r6, r7
 8003080:	600f      	str	r7, [r1, #0]
 8003082:	608b      	str	r3, [r1, #8]
 8003084:	2e00      	cmp	r6, #0
 8003086:	dd9f      	ble.n	8002fc8 <__sflush_r+0x18>
 8003088:	4633      	mov	r3, r6
 800308a:	463a      	mov	r2, r7
 800308c:	4628      	mov	r0, r5
 800308e:	6a21      	ldr	r1, [r4, #32]
 8003090:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003094:	47e0      	blx	ip
 8003096:	2800      	cmp	r0, #0
 8003098:	dc06      	bgt.n	80030a8 <__sflush_r+0xf8>
 800309a:	89a3      	ldrh	r3, [r4, #12]
 800309c:	f04f 30ff 	mov.w	r0, #4294967295
 80030a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030a4:	81a3      	strh	r3, [r4, #12]
 80030a6:	e790      	b.n	8002fca <__sflush_r+0x1a>
 80030a8:	4407      	add	r7, r0
 80030aa:	1a36      	subs	r6, r6, r0
 80030ac:	e7ea      	b.n	8003084 <__sflush_r+0xd4>
 80030ae:	bf00      	nop
 80030b0:	20400001 	.word	0x20400001

080030b4 <_fflush_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	690b      	ldr	r3, [r1, #16]
 80030b8:	4605      	mov	r5, r0
 80030ba:	460c      	mov	r4, r1
 80030bc:	b913      	cbnz	r3, 80030c4 <_fflush_r+0x10>
 80030be:	2500      	movs	r5, #0
 80030c0:	4628      	mov	r0, r5
 80030c2:	bd38      	pop	{r3, r4, r5, pc}
 80030c4:	b118      	cbz	r0, 80030ce <_fflush_r+0x1a>
 80030c6:	6983      	ldr	r3, [r0, #24]
 80030c8:	b90b      	cbnz	r3, 80030ce <_fflush_r+0x1a>
 80030ca:	f7ff fa19 	bl	8002500 <__sinit>
 80030ce:	4b14      	ldr	r3, [pc, #80]	; (8003120 <_fflush_r+0x6c>)
 80030d0:	429c      	cmp	r4, r3
 80030d2:	d11b      	bne.n	800310c <_fflush_r+0x58>
 80030d4:	686c      	ldr	r4, [r5, #4]
 80030d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0ef      	beq.n	80030be <_fflush_r+0xa>
 80030de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80030e0:	07d0      	lsls	r0, r2, #31
 80030e2:	d404      	bmi.n	80030ee <_fflush_r+0x3a>
 80030e4:	0599      	lsls	r1, r3, #22
 80030e6:	d402      	bmi.n	80030ee <_fflush_r+0x3a>
 80030e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ea:	f7ff faa7 	bl	800263c <__retarget_lock_acquire_recursive>
 80030ee:	4628      	mov	r0, r5
 80030f0:	4621      	mov	r1, r4
 80030f2:	f7ff ff5d 	bl	8002fb0 <__sflush_r>
 80030f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030f8:	4605      	mov	r5, r0
 80030fa:	07da      	lsls	r2, r3, #31
 80030fc:	d4e0      	bmi.n	80030c0 <_fflush_r+0xc>
 80030fe:	89a3      	ldrh	r3, [r4, #12]
 8003100:	059b      	lsls	r3, r3, #22
 8003102:	d4dd      	bmi.n	80030c0 <_fflush_r+0xc>
 8003104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003106:	f7ff fa9a 	bl	800263e <__retarget_lock_release_recursive>
 800310a:	e7d9      	b.n	80030c0 <_fflush_r+0xc>
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <_fflush_r+0x70>)
 800310e:	429c      	cmp	r4, r3
 8003110:	d101      	bne.n	8003116 <_fflush_r+0x62>
 8003112:	68ac      	ldr	r4, [r5, #8]
 8003114:	e7df      	b.n	80030d6 <_fflush_r+0x22>
 8003116:	4b04      	ldr	r3, [pc, #16]	; (8003128 <_fflush_r+0x74>)
 8003118:	429c      	cmp	r4, r3
 800311a:	bf08      	it	eq
 800311c:	68ec      	ldreq	r4, [r5, #12]
 800311e:	e7da      	b.n	80030d6 <_fflush_r+0x22>
 8003120:	08003448 	.word	0x08003448
 8003124:	08003468 	.word	0x08003468
 8003128:	08003428 	.word	0x08003428

0800312c <_lseek_r>:
 800312c:	b538      	push	{r3, r4, r5, lr}
 800312e:	4604      	mov	r4, r0
 8003130:	4608      	mov	r0, r1
 8003132:	4611      	mov	r1, r2
 8003134:	2200      	movs	r2, #0
 8003136:	4d05      	ldr	r5, [pc, #20]	; (800314c <_lseek_r+0x20>)
 8003138:	602a      	str	r2, [r5, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	f7fd f9f7 	bl	800052e <_lseek>
 8003140:	1c43      	adds	r3, r0, #1
 8003142:	d102      	bne.n	800314a <_lseek_r+0x1e>
 8003144:	682b      	ldr	r3, [r5, #0]
 8003146:	b103      	cbz	r3, 800314a <_lseek_r+0x1e>
 8003148:	6023      	str	r3, [r4, #0]
 800314a:	bd38      	pop	{r3, r4, r5, pc}
 800314c:	200000ec 	.word	0x200000ec

08003150 <__swhatbuf_r>:
 8003150:	b570      	push	{r4, r5, r6, lr}
 8003152:	460e      	mov	r6, r1
 8003154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003158:	4614      	mov	r4, r2
 800315a:	2900      	cmp	r1, #0
 800315c:	461d      	mov	r5, r3
 800315e:	b096      	sub	sp, #88	; 0x58
 8003160:	da08      	bge.n	8003174 <__swhatbuf_r+0x24>
 8003162:	2200      	movs	r2, #0
 8003164:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003168:	602a      	str	r2, [r5, #0]
 800316a:	061a      	lsls	r2, r3, #24
 800316c:	d410      	bmi.n	8003190 <__swhatbuf_r+0x40>
 800316e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003172:	e00e      	b.n	8003192 <__swhatbuf_r+0x42>
 8003174:	466a      	mov	r2, sp
 8003176:	f000 f8c5 	bl	8003304 <_fstat_r>
 800317a:	2800      	cmp	r0, #0
 800317c:	dbf1      	blt.n	8003162 <__swhatbuf_r+0x12>
 800317e:	9a01      	ldr	r2, [sp, #4]
 8003180:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003184:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003188:	425a      	negs	r2, r3
 800318a:	415a      	adcs	r2, r3
 800318c:	602a      	str	r2, [r5, #0]
 800318e:	e7ee      	b.n	800316e <__swhatbuf_r+0x1e>
 8003190:	2340      	movs	r3, #64	; 0x40
 8003192:	2000      	movs	r0, #0
 8003194:	6023      	str	r3, [r4, #0]
 8003196:	b016      	add	sp, #88	; 0x58
 8003198:	bd70      	pop	{r4, r5, r6, pc}
	...

0800319c <__smakebuf_r>:
 800319c:	898b      	ldrh	r3, [r1, #12]
 800319e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80031a0:	079d      	lsls	r5, r3, #30
 80031a2:	4606      	mov	r6, r0
 80031a4:	460c      	mov	r4, r1
 80031a6:	d507      	bpl.n	80031b8 <__smakebuf_r+0x1c>
 80031a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	6123      	str	r3, [r4, #16]
 80031b0:	2301      	movs	r3, #1
 80031b2:	6163      	str	r3, [r4, #20]
 80031b4:	b002      	add	sp, #8
 80031b6:	bd70      	pop	{r4, r5, r6, pc}
 80031b8:	466a      	mov	r2, sp
 80031ba:	ab01      	add	r3, sp, #4
 80031bc:	f7ff ffc8 	bl	8003150 <__swhatbuf_r>
 80031c0:	9900      	ldr	r1, [sp, #0]
 80031c2:	4605      	mov	r5, r0
 80031c4:	4630      	mov	r0, r6
 80031c6:	f7ff fa5b 	bl	8002680 <_malloc_r>
 80031ca:	b948      	cbnz	r0, 80031e0 <__smakebuf_r+0x44>
 80031cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031d0:	059a      	lsls	r2, r3, #22
 80031d2:	d4ef      	bmi.n	80031b4 <__smakebuf_r+0x18>
 80031d4:	f023 0303 	bic.w	r3, r3, #3
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	81a3      	strh	r3, [r4, #12]
 80031de:	e7e3      	b.n	80031a8 <__smakebuf_r+0xc>
 80031e0:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <__smakebuf_r+0x7c>)
 80031e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80031e4:	89a3      	ldrh	r3, [r4, #12]
 80031e6:	6020      	str	r0, [r4, #0]
 80031e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ec:	81a3      	strh	r3, [r4, #12]
 80031ee:	9b00      	ldr	r3, [sp, #0]
 80031f0:	6120      	str	r0, [r4, #16]
 80031f2:	6163      	str	r3, [r4, #20]
 80031f4:	9b01      	ldr	r3, [sp, #4]
 80031f6:	b15b      	cbz	r3, 8003210 <__smakebuf_r+0x74>
 80031f8:	4630      	mov	r0, r6
 80031fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031fe:	f000 f893 	bl	8003328 <_isatty_r>
 8003202:	b128      	cbz	r0, 8003210 <__smakebuf_r+0x74>
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	f023 0303 	bic.w	r3, r3, #3
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	81a3      	strh	r3, [r4, #12]
 8003210:	89a0      	ldrh	r0, [r4, #12]
 8003212:	4305      	orrs	r5, r0
 8003214:	81a5      	strh	r5, [r4, #12]
 8003216:	e7cd      	b.n	80031b4 <__smakebuf_r+0x18>
 8003218:	08002499 	.word	0x08002499

0800321c <memchr>:
 800321c:	4603      	mov	r3, r0
 800321e:	b510      	push	{r4, lr}
 8003220:	b2c9      	uxtb	r1, r1
 8003222:	4402      	add	r2, r0
 8003224:	4293      	cmp	r3, r2
 8003226:	4618      	mov	r0, r3
 8003228:	d101      	bne.n	800322e <memchr+0x12>
 800322a:	2000      	movs	r0, #0
 800322c:	e003      	b.n	8003236 <memchr+0x1a>
 800322e:	7804      	ldrb	r4, [r0, #0]
 8003230:	3301      	adds	r3, #1
 8003232:	428c      	cmp	r4, r1
 8003234:	d1f6      	bne.n	8003224 <memchr+0x8>
 8003236:	bd10      	pop	{r4, pc}

08003238 <__malloc_lock>:
 8003238:	4801      	ldr	r0, [pc, #4]	; (8003240 <__malloc_lock+0x8>)
 800323a:	f7ff b9ff 	b.w	800263c <__retarget_lock_acquire_recursive>
 800323e:	bf00      	nop
 8003240:	200000e0 	.word	0x200000e0

08003244 <__malloc_unlock>:
 8003244:	4801      	ldr	r0, [pc, #4]	; (800324c <__malloc_unlock+0x8>)
 8003246:	f7ff b9fa 	b.w	800263e <__retarget_lock_release_recursive>
 800324a:	bf00      	nop
 800324c:	200000e0 	.word	0x200000e0

08003250 <_free_r>:
 8003250:	b538      	push	{r3, r4, r5, lr}
 8003252:	4605      	mov	r5, r0
 8003254:	2900      	cmp	r1, #0
 8003256:	d040      	beq.n	80032da <_free_r+0x8a>
 8003258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800325c:	1f0c      	subs	r4, r1, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	bfb8      	it	lt
 8003262:	18e4      	addlt	r4, r4, r3
 8003264:	f7ff ffe8 	bl	8003238 <__malloc_lock>
 8003268:	4a1c      	ldr	r2, [pc, #112]	; (80032dc <_free_r+0x8c>)
 800326a:	6813      	ldr	r3, [r2, #0]
 800326c:	b933      	cbnz	r3, 800327c <_free_r+0x2c>
 800326e:	6063      	str	r3, [r4, #4]
 8003270:	6014      	str	r4, [r2, #0]
 8003272:	4628      	mov	r0, r5
 8003274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003278:	f7ff bfe4 	b.w	8003244 <__malloc_unlock>
 800327c:	42a3      	cmp	r3, r4
 800327e:	d908      	bls.n	8003292 <_free_r+0x42>
 8003280:	6820      	ldr	r0, [r4, #0]
 8003282:	1821      	adds	r1, r4, r0
 8003284:	428b      	cmp	r3, r1
 8003286:	bf01      	itttt	eq
 8003288:	6819      	ldreq	r1, [r3, #0]
 800328a:	685b      	ldreq	r3, [r3, #4]
 800328c:	1809      	addeq	r1, r1, r0
 800328e:	6021      	streq	r1, [r4, #0]
 8003290:	e7ed      	b.n	800326e <_free_r+0x1e>
 8003292:	461a      	mov	r2, r3
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	b10b      	cbz	r3, 800329c <_free_r+0x4c>
 8003298:	42a3      	cmp	r3, r4
 800329a:	d9fa      	bls.n	8003292 <_free_r+0x42>
 800329c:	6811      	ldr	r1, [r2, #0]
 800329e:	1850      	adds	r0, r2, r1
 80032a0:	42a0      	cmp	r0, r4
 80032a2:	d10b      	bne.n	80032bc <_free_r+0x6c>
 80032a4:	6820      	ldr	r0, [r4, #0]
 80032a6:	4401      	add	r1, r0
 80032a8:	1850      	adds	r0, r2, r1
 80032aa:	4283      	cmp	r3, r0
 80032ac:	6011      	str	r1, [r2, #0]
 80032ae:	d1e0      	bne.n	8003272 <_free_r+0x22>
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4401      	add	r1, r0
 80032b6:	6011      	str	r1, [r2, #0]
 80032b8:	6053      	str	r3, [r2, #4]
 80032ba:	e7da      	b.n	8003272 <_free_r+0x22>
 80032bc:	d902      	bls.n	80032c4 <_free_r+0x74>
 80032be:	230c      	movs	r3, #12
 80032c0:	602b      	str	r3, [r5, #0]
 80032c2:	e7d6      	b.n	8003272 <_free_r+0x22>
 80032c4:	6820      	ldr	r0, [r4, #0]
 80032c6:	1821      	adds	r1, r4, r0
 80032c8:	428b      	cmp	r3, r1
 80032ca:	bf01      	itttt	eq
 80032cc:	6819      	ldreq	r1, [r3, #0]
 80032ce:	685b      	ldreq	r3, [r3, #4]
 80032d0:	1809      	addeq	r1, r1, r0
 80032d2:	6021      	streq	r1, [r4, #0]
 80032d4:	6063      	str	r3, [r4, #4]
 80032d6:	6054      	str	r4, [r2, #4]
 80032d8:	e7cb      	b.n	8003272 <_free_r+0x22>
 80032da:	bd38      	pop	{r3, r4, r5, pc}
 80032dc:	200000e4 	.word	0x200000e4

080032e0 <_read_r>:
 80032e0:	b538      	push	{r3, r4, r5, lr}
 80032e2:	4604      	mov	r4, r0
 80032e4:	4608      	mov	r0, r1
 80032e6:	4611      	mov	r1, r2
 80032e8:	2200      	movs	r2, #0
 80032ea:	4d05      	ldr	r5, [pc, #20]	; (8003300 <_read_r+0x20>)
 80032ec:	602a      	str	r2, [r5, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	f7fd f8dc 	bl	80004ac <_read>
 80032f4:	1c43      	adds	r3, r0, #1
 80032f6:	d102      	bne.n	80032fe <_read_r+0x1e>
 80032f8:	682b      	ldr	r3, [r5, #0]
 80032fa:	b103      	cbz	r3, 80032fe <_read_r+0x1e>
 80032fc:	6023      	str	r3, [r4, #0]
 80032fe:	bd38      	pop	{r3, r4, r5, pc}
 8003300:	200000ec 	.word	0x200000ec

08003304 <_fstat_r>:
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	2300      	movs	r3, #0
 8003308:	4d06      	ldr	r5, [pc, #24]	; (8003324 <_fstat_r+0x20>)
 800330a:	4604      	mov	r4, r0
 800330c:	4608      	mov	r0, r1
 800330e:	4611      	mov	r1, r2
 8003310:	602b      	str	r3, [r5, #0]
 8003312:	f7fd f8f3 	bl	80004fc <_fstat>
 8003316:	1c43      	adds	r3, r0, #1
 8003318:	d102      	bne.n	8003320 <_fstat_r+0x1c>
 800331a:	682b      	ldr	r3, [r5, #0]
 800331c:	b103      	cbz	r3, 8003320 <_fstat_r+0x1c>
 800331e:	6023      	str	r3, [r4, #0]
 8003320:	bd38      	pop	{r3, r4, r5, pc}
 8003322:	bf00      	nop
 8003324:	200000ec 	.word	0x200000ec

08003328 <_isatty_r>:
 8003328:	b538      	push	{r3, r4, r5, lr}
 800332a:	2300      	movs	r3, #0
 800332c:	4d05      	ldr	r5, [pc, #20]	; (8003344 <_isatty_r+0x1c>)
 800332e:	4604      	mov	r4, r0
 8003330:	4608      	mov	r0, r1
 8003332:	602b      	str	r3, [r5, #0]
 8003334:	f7fd f8f1 	bl	800051a <_isatty>
 8003338:	1c43      	adds	r3, r0, #1
 800333a:	d102      	bne.n	8003342 <_isatty_r+0x1a>
 800333c:	682b      	ldr	r3, [r5, #0]
 800333e:	b103      	cbz	r3, 8003342 <_isatty_r+0x1a>
 8003340:	6023      	str	r3, [r4, #0]
 8003342:	bd38      	pop	{r3, r4, r5, pc}
 8003344:	200000ec 	.word	0x200000ec

08003348 <_init>:
 8003348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334a:	bf00      	nop
 800334c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800334e:	bc08      	pop	{r3}
 8003350:	469e      	mov	lr, r3
 8003352:	4770      	bx	lr

08003354 <_fini>:
 8003354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003356:	bf00      	nop
 8003358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335a:	bc08      	pop	{r3}
 800335c:	469e      	mov	lr, r3
 800335e:	4770      	bx	lr
